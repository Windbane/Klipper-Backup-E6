Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
Configured MCU 'CB1' (1024 moves)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]
recover_velocity = 50

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	SAVE_GCODE_STATE NAME=load_state
	M300
	G91
	G92 E0
	G1 E350 F{max_velocity}
	G1 E25 F{speed}
	M300
	M300
	RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	SAVE_GCODE_STATE NAME=unload_state
	G91
	M300
	G92 E0
	G1 E25 F{speed}
	G1 E-420 F{max_velocity}
	M300
	M300
	RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
variable_buffer = 20
variable_last_area_start_x = -1
variable_last_area_start_y = -1
variable_last_area_end_x = -1
variable_last_area_end_y = -1
gcode = 
	
	{% if params.FORCE_NEW_MESH != null %}
	{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }
	{% endif %}
	{% if printer["bed_mesh"].profile_name == '' %}
	{ action_respond_info("No existing bed mesh found.") }
	{% set last_area_end_x=-1 %}
	{% endif %}
	
	{% if printer.toolhead.homed_axes != "xyz" %}
	G28
	{% endif %}
	
	{% set klicky_available = printer['gcode_macro _Probe_Variables'] != null %}
	{% set euclid_available = printer['gcode_macro EuclidProbe'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg
	{% if params.PRINT_MIN %}
	{ action_respond_info("print_min: %s" % params.PRINT_MIN) }
	{ action_respond_info("print_max: %s" % params.PRINT_MAX) }
	
	{% set blTouchConfig = printer['configfile'].config["bltouch"] %}
	{% if blTouchConfig %}
	{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}
	{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}
	{% endif %}
	
	{% set probeConfig = printer['configfile'].config["probe"] %}
	{% if probeConfig %}
	{% set OffsetX = probeConfig.x_offset|default(0)|float %}
	{% set OffsetY = probeConfig.y_offset|default(0)|float %}
	{% endif %}
	
	{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}
	{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}
	{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}
	{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}
	
	{% if last_area_start_x > 0 %}
	{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }
	{% endif %}
	
	{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}
	{% if klicky_available %}
	_CheckProbe action=query
	Attach_Probe
	{% elif euclid_available %}
	DEPLOY_PROBE
	{% endif %}
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	
	
	{% set bedMeshConfig = printer['configfile'].config["bed_mesh"] %}
	{% set minimum_probe_count = 3 %}
	{% if bedMeshConfig.algorithm == "bicubic" %}
	{% set minimum_probe_count = 5 %}
	{% endif %}
	{% set probe_count = bedMeshConfig.probe_count.split(",") %}
	{% set probe_count_x = probe_count[0]|int %}
	{% if probe_count.__len__() > 1 %}
	{% set probe_count_y = probe_count[1]|int %}
	{% else %}
	{% set probe_count_y = probe_count_x|int %}
	{% endif %}
	{% set relative_reference_index = bedMeshConfig.relative_reference_index %}
	{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	
	{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	
	
	{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	
	{% if print_min_x - buffer >= mesh_min_x %}
	{% set mesh_min_x = print_min_x - buffer %}
	{% endif %}
	
	{% if print_min_y - buffer >= mesh_min_y %}
	{% set mesh_min_y = print_min_y - buffer %}
	{% endif %}
	
	{% if print_max_x + buffer <= mesh_max_x %}
	{% set mesh_max_x = print_max_x + buffer %}
	{% endif %}
	
	{% if print_max_y + buffer <= mesh_max_y %}
	{% set mesh_max_y = print_max_y + buffer %}
	{% endif %}
	
	{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }
	
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}
	
	{% if printer["gcode_macro status_meshing"] != null %}
	status_meshing
	{% endif %}
	
	{% if relative_reference_index == 0 or relative_reference_index == null %}
	_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}
	{% else %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }
	_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% endif %}
	{% else %}
	{% if printer["gcode_macro status_meshing"] != null %}
	status_meshing
	{% endif %}
	_BED_MESH_CALIBRATE
	{% endif %}
	{% if klicky_available %}
	Dock_Probe
	{% elif euclid_available %}
	STOW_PROBE
	{% endif %}
	{% else %}
	{ action_respond_info("No need to recreate Bed Mesh since it's same as current mesh or smaller") }
	{% endif %}
	{% else %}
	{% if klicky_available %}
	_CheckProbe action=query
	Attach_Probe
	{% elif euclid_available %}
	STOW_PROBE
	{% endif %}
	{% if printer["gcode_macro status_meshing"] != null %}
	status_meshing
	{% endif %}
	_BED_MESH_CALIBRATE
	{% if klicky_available %}
	Dock_Probe
	{% endif %}
	{% if euclid_available %}
	STOW_PROBE
	{% endif %}
	{% endif %}
	{% if printer["gcode_macro status_ready"] != null %}
	status_ready
	{% endif %}

[stepper_x]
step_pin = PD4
dir_pin = PD3
enable_pin = !PD6
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_min = -1
position_endstop = 260
position_max = 260
homing_speed = 50

[stepper_y]
step_pin = PA15
dir_pin = PA8
enable_pin = !PD1
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC3
position_min = -1
position_endstop = 260
position_max = 260
homing_speed = 50

[stepper_z]
step_pin = PE2
dir_pin = !PE3
enable_pin = !PE0
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 400
homing_speed = 25

[extruder]
step_pin = PD15
dir_pin = PD14
enable_pin = !PC7
microsteps = 16
rotation_distance = 3.4334
nozzle_diameter = 0.6
filament_diameter = 1.750
heater_pin = PB3
sensor_type = Generic 3950
sensor_pin = PA2
min_temp = 0
max_temp = 300
max_extrude_only_distance = 102
pressure_advance = 0.025
control = pid
pid_kp = 26.231
pid_ki = 1.305
pid_kd = 131.813

[heater_bed]
heater_pin = PD7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA1
min_temp = 0
max_temp = 130
control = pid
pid_kp = 67.038
pid_ki = 0.652
pid_kd = 1722.030

[fan]
pin = PB7

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00

[mcu CB1]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 5000
max_accel_to_decel = 4000
max_z_velocity = 10
max_z_accel = 100
square_corner_velocity = 5

[adxl345]
cs_pin = CB1:None
spi_bus = spidev1.1
axes_map = z,y,x

[resonance_tester]
accel_chip = adxl345
probe_points = 
	150.7, 137, 135

[input_shaper]
shaper_freq_x = 62.2
shaper_freq_y = 62.8
shaper_type = mzv

[display]
lcd_type = emulated_st7920
spi_software_miso_pin = PA14
spi_software_mosi_pin = EXP1_3
spi_software_sclk_pin = EXP1_5
en_pin = EXP1_4
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2

[output_pin beeper]
pin = EXP1_1

[board_pins]
aliases = 
	
	EXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,
	EXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,
	
	EXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,
	EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>

[tmc2209 stepper_x]
uart_pin = PD5
run_current = 0.800

[tmc2209 stepper_y]
uart_pin = PD0
run_current = 0.800

[tmc2209 stepper_z]
uart_pin = PE1
run_current = 0.800

[tmc2209 extruder]
uart_pin = PC6
run_current = 0.800

[bltouch]
sensor_pin = ^PC13
control_pin = PE5
x_offset = -33.7
y_offset = -1
speed = 5.0
samples = 3
samples_result = median
sample_retract_dist = 5.0
samples_tolerance = 0.10
samples_tolerance_retries = 3
z_offset = 2.025

[safe_z_home]
home_xy_position = 150.7, 137
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 120
horizontal_move_z = 5
mesh_min = 10, 10
mesh_max = 225, 225
algorithm = bicubic
probe_count = 5,5

[filament_motion_sensor encoder_sensor]
switch_pin = ^PC2
detection_length = 10
extruder = extruder
pause_on_runout = True
event_delay = 3.0
pause_delay = 0.5
runout_gcode = 
	M117 Filament encoder runout
insert_gcode = 
	M117 Filament encoder inserted

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

[gcode_macro SFS_ENABLE]
description = Enable smart filament sensor
gcode = 
	M117 ENABLING the Smart Filament Sensor
	G92 E0
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1

[gcode_macro SFS_DISABLE]
description = Disable smart filament sensor
gcode = 
	M117 DISABLING the Smart Filament Sensor
	G92 E0
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	BED_MESH_PROFILE LOAD=default2
	
	
	G1 Z5 F300
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	SFS_ENABLE
	
	
	G1 Z5.0 F3000
	G1 X11.1 Y20 Z0.28 F5000.0
	G1 X11.1 Y200.0 Z0.28 F1500.0 E15
	G1 X11.4 Y200.0 Z0.28 F5000.0
	G1 X11.4 Y20 Z0.28 F1500.0 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 Z5 E-3 F300
	
	G1 Z10 F3000
	G1 X0 Y250 F2200
	M107
	G90
	
	M84
	
	SFS_DISABLE

[gcode_arcs]
resolution = 1.0

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state
	SET_IDLE_TIMEOUT TIMEOUT=1800

[gcode_macro PURGE_LINE]
gcode = 
	G0 Y0 X40
	G1 Z0.2 F500.0
	G92 E0.0
	G1 E2 F500
	G1 X80 E8.0 F500.0
	G1 Y0.3
	G1 X40 E8.0 F500.0
	G92 E0.0
	G1 Z2.0

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[bed_mesh default2]
version = 1
points = 
	-0.025000, -0.035000, -0.025000, -0.022500, -0.047500
	-0.000000, 0.005000, 0.005000, -0.015000, -0.040000
	-0.005000, 0.005000, 0.010000, -0.025000, -0.065000
	0.012500, 0.020000, 0.012500, -0.020000, -0.047500
	-0.035000, -0.050000, -0.057500, -0.102500, -0.120000
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 10.0
max_x = 225.0
min_y = 10.0
max_y = 225.0
=======================
Loaded MCU 'mcu' 105 commands (v0.11.0-205-g5f0d252b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi2b=PI2,PI3,PI1 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi4=PE13,PE14,PE12 BUS_PINS_spi5=PF8,PF9,PF7 BUS_PINS_spi5a=PH7,PF11,PH6 BUS_PINS_spi6=PG12,PG14,PG13 CLOCK_FREQ=400000000 MCU=stm32h743xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PH0,PH1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'mcu' (1024 moves)
Args: ['/home/biqu/klipper/klippy/klippy.py', '/home/biqu/printer_data/config/printer.cfg', '-I', '/home/biqu/printer_data/comms/klippy.serial', '-l', '/home/biqu/printer_data/logs/klippy.log', '-a', '/home/biqu/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-60-g0665dc89'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
=============== Log rollover at Wed Jan 10 16:42:05 2024 ===============
webhooks client 281473434665312: Disconnected
webhooks client 281473445013536: New connection
webhooks client 281473445013536: Client info {'program': 'Moonraker', 'version': 'v0.8.0-246-gea6df41'}
webhooks: registering remote method 'shutdown_machine' for connection id: 281473445013536
webhooks: registering remote method 'reboot_machine' for connection id: 281473445013536
webhooks: registering remote method 'pause_job_queue' for connection id: 281473445013536
webhooks: registering remote method 'start_job_queue' for connection id: 281473445013536
Starting Klippy...
Args: ['/home/biqu/klipper/klippy/klippy.py', '/home/biqu/printer_data/config/printer.cfg', '-I', '/home/biqu/printer_data/comms/klippy.serial', '-l', '/home/biqu/printer_data/logs/klippy.log', '-a', '/home/biqu/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-61-gb50d6669'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Wed Jan 10 16:42:50 2024 (1704904970.5 263779.1)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]
recover_velocity = 50

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro LOAD_FILAMENT]
gcode = 
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	SAVE_GCODE_STATE NAME=load_state
	M300
	G91
	G92 E0
	G1 E350 F{max_velocity}
	G1 E25 F{speed}
	M300
	M300
	RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	{% set speed = params.SPEED|default(300) %}
	{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
	SAVE_GCODE_STATE NAME=unload_state
	G91
	M300
	G92 E0
	G1 E25 F{speed}
	G1 E-420 F{max_velocity}
	M300
	M300
	RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
variable_buffer = 20
variable_last_area_start_x = -1
variable_last_area_start_y = -1
variable_last_area_end_x = -1
variable_last_area_end_y = -1
gcode = 
	
	{% if params.FORCE_NEW_MESH != null %}
	{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }
	{% endif %}
	{% if printer["bed_mesh"].profile_name == '' %}
	{ action_respond_info("No existing bed mesh found.") }
	{% set last_area_end_x=-1 %}
	{% endif %}
	
	{% if printer.toolhead.homed_axes != "xyz" %}
	G28
	{% endif %}
	
	{% set klicky_available = printer['gcode_macro _Probe_Variables'] != null %}
	{% set euclid_available = printer['gcode_macro EuclidProbe'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg
	{% if params.PRINT_MIN %}
	{ action_respond_info("print_min: %s" % params.PRINT_MIN) }
	{ action_respond_info("print_max: %s" % params.PRINT_MAX) }
	
	{% set blTouchConfig = printer['configfile'].config["bltouch"] %}
	{% if blTouchConfig %}
	{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}
	{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}
	{% endif %}
	
	{% set probeConfig = printer['configfile'].config["probe"] %}
	{% if probeConfig %}
	{% set OffsetX = probeConfig.x_offset|default(0)|float %}
	{% set OffsetY = probeConfig.y_offset|default(0)|float %}
	{% endif %}
	
	{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}
	{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}
	{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}
	{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}
	
	{% if last_area_start_x > 0 %}
	{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }
	{% endif %}
	
	{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}
	{% if klicky_available %}
	_CheckProbe action=query
	Attach_Probe
	{% elif euclid_available %}
	DEPLOY_PROBE
	{% endif %}
	{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}
	
	
	{% set bedMeshConfig = printer['configfile'].config["bed_mesh"] %}
	{% set minimum_probe_count = 3 %}
	{% if bedMeshConfig.algorithm == "bicubic" %}
	{% set minimum_probe_count = 5 %}
	{% endif %}
	{% set probe_count = bedMeshConfig.probe_count.split(",") %}
	{% set probe_count_x = probe_count[0]|int %}
	{% if probe_count.__len__() > 1 %}
	{% set probe_count_y = probe_count[1]|int %}
	{% else %}
	{% set probe_count_y = probe_count_x|int %}
	{% endif %}
	{% set relative_reference_index = bedMeshConfig.relative_reference_index %}
	{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
	{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
	{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
	{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
	
	
	{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}
	{% set probe_count_x = minimum_probe_count %}
	{% endif %}
	
	
	{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}
	{% set probe_count_y = minimum_probe_count %}
	{% endif %}
	
	{% if print_min_x - buffer >= mesh_min_x %}
	{% set mesh_min_x = print_min_x - buffer %}
	{% endif %}
	
	{% if print_min_y - buffer >= mesh_min_y %}
	{% set mesh_min_y = print_min_y - buffer %}
	{% endif %}
	
	{% if print_max_x + buffer <= mesh_max_x %}
	{% set mesh_max_x = print_max_x + buffer %}
	{% endif %}
	
	{% if print_max_y + buffer <= mesh_max_y %}
	{% set mesh_max_y = print_max_y + buffer %}
	{% endif %}
	
	{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }
	{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }
	{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }
	
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}
	SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}
	
	{% if printer["gcode_macro status_meshing"] != null %}
	status_meshing
	{% endif %}
	
	{% if relative_reference_index == 0 or relative_reference_index == null %}
	_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}
	{% else %}
	{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
	{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }
	_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
	{% endif %}
	{% else %}
	{% if printer["gcode_macro status_meshing"] != null %}
	status_meshing
	{% endif %}
	_BED_MESH_CALIBRATE
	{% endif %}
	{% if klicky_available %}
	Dock_Probe
	{% elif euclid_available %}
	STOW_PROBE
	{% endif %}
	{% else %}
	{ action_respond_info("No need to recreate Bed Mesh since it's same as current mesh or smaller") }
	{% endif %}
	{% else %}
	{% if klicky_available %}
	_CheckProbe action=query
	Attach_Probe
	{% elif euclid_available %}
	STOW_PROBE
	{% endif %}
	{% if printer["gcode_macro status_meshing"] != null %}
	status_meshing
	{% endif %}
	_BED_MESH_CALIBRATE
	{% if klicky_available %}
	Dock_Probe
	{% endif %}
	{% if euclid_available %}
	STOW_PROBE
	{% endif %}
	{% endif %}
	{% if printer["gcode_macro status_ready"] != null %}
	status_ready
	{% endif %}

[stepper_x]
step_pin = PD4
dir_pin = PD3
enable_pin = !PD6
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC1
position_min = -1
position_endstop = 260
position_max = 260
homing_speed = 50

[stepper_y]
step_pin = PA15
dir_pin = PA8
enable_pin = !PD1
microsteps = 16
rotation_distance = 40
endstop_pin = ^PC3
position_min = -1
position_endstop = 260
position_max = 260
homing_speed = 50

[stepper_z]
step_pin = PE2
dir_pin = !PE3
enable_pin = !PE0
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 400
homing_speed = 25

[extruder]
step_pin = PD15
dir_pin = PD14
enable_pin = !PC7
microsteps = 16
rotation_distance = 3.4334
nozzle_diameter = 0.6
filament_diameter = 1.750
heater_pin = PB3
sensor_type = Generic 3950
sensor_pin = PA2
min_temp = 0
max_temp = 300
max_extrude_only_distance = 102
pressure_advance = 0.025
control = pid
pid_kp = 26.231
pid_ki = 1.305
pid_kd = 131.813

[heater_bed]
heater_pin = PD7
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA1
min_temp = 0
max_temp = 130
control = pid
pid_kp = 67.038
pid_ki = 0.652
pid_kd = 1722.030

[fan]
pin = PB7

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00

[mcu CB1]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = corexy
max_velocity = 600
max_accel = 5000
max_accel_to_decel = 4000
max_z_velocity = 10
max_z_accel = 100
square_corner_velocity = 5

[adxl345]
cs_pin = CB1:None
spi_bus = spidev1.1
axes_map = z,y,x

[resonance_tester]
accel_chip = adxl345
probe_points = 
	150.7, 137, 135

[input_shaper]
shaper_freq_x = 62.2
shaper_freq_y = 62.8
shaper_type = mzv

[display]
lcd_type = emulated_st7920
spi_software_miso_pin = PA14
spi_software_mosi_pin = EXP1_3
spi_software_sclk_pin = EXP1_5
en_pin = EXP1_4
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2

[output_pin beeper]
pin = EXP1_1

[board_pins]
aliases = 
	
	EXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,
	EXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,
	
	EXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,
	EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>

[tmc2209 stepper_x]
uart_pin = PD5
run_current = 0.800

[tmc2209 stepper_y]
uart_pin = PD0
run_current = 0.800

[tmc2209 stepper_z]
uart_pin = PE1
run_current = 0.800

[tmc2209 extruder]
uart_pin = PC6
run_current = 0.800

[bltouch]
sensor_pin = ^PC13
control_pin = PE5
x_offset = -33.7
y_offset = -1
speed = 5.0
samples = 3
samples_result = median
sample_retract_dist = 5.0
samples_tolerance = 0.10
samples_tolerance_retries = 3
z_offset = 2.025

[safe_z_home]
home_xy_position = 150.7, 137
speed = 100
z_hop = 10
z_hop_speed = 5

[bed_mesh]
speed = 120
horizontal_move_z = 5
mesh_min = 10, 10
mesh_max = 225, 225
algorithm = bicubic
probe_count = 5,5

[filament_motion_sensor encoder_sensor]
switch_pin = ^PC2
detection_length = 10
extruder = extruder
pause_on_runout = True
event_delay = 3.0
pause_delay = 0.5
runout_gcode = 
	M117 Filament encoder runout
insert_gcode = 
	M117 Filament encoder inserted

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

[gcode_macro SFS_ENABLE]
description = Enable smart filament sensor
gcode = 
	M117 ENABLING the Smart Filament Sensor
	G92 E0
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1

[gcode_macro SFS_DISABLE]
description = Disable smart filament sensor
gcode = 
	M117 DISABLING the Smart Filament Sensor
	G92 E0
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	BED_MESH_PROFILE LOAD=default2
	
	
	G1 Z5 F300
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	SFS_ENABLE
	
	
	G1 Z5.0 F3000
	G1 X11.1 Y20 Z0.28 F5000.0
	G1 X11.1 Y200.0 Z0.28 F1500.0 E15
	G1 X11.4 Y200.0 Z0.28 F5000.0
	G1 X11.4 Y20 Z0.28 F1500.0 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 Z5 E-3 F300
	
	G1 Z10 F3000
	G1 X0 Y250 F2200
	M107
	G90
	
	M84
	
	SFS_DISABLE

[gcode_arcs]
resolution = 1.0

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	RESTORE_GCODE_STATE NAME=M600_state
	SET_IDLE_TIMEOUT TIMEOUT=1800

[gcode_macro PURGE_LINE]
gcode = 
	G0 Y0 X40
	G1 Z0.2 F500.0
	G92 E0.0
	G1 E2 F500
	G1 X80 E8.0 F500.0
	G1 Y0.3
	G1 X40 E8.0 F500.0
	G92 E0.0
	G1 Z2.0

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	M400
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	M400
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	M400
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[bed_mesh default2]
version = 1
points = 
	-0.025000, -0.035000, -0.025000, -0.022500, -0.047500
	-0.000000, 0.005000, 0.005000, -0.015000, -0.040000
	-0.005000, 0.005000, 0.010000, -0.025000, -0.065000
	0.012500, 0.020000, 0.012500, -0.020000, -0.047500
	-0.035000, -0.050000, -0.057500, -0.102500, -0.120000
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 10.0
max_x = 225.0
min_y = 10.0
max_y = 225.0
=======================
Extruder max_extrude_ratio=0.598682
mcu 'mcu': Starting serial connect
webhooks client 281473401416816: New connection
webhooks client 281473401416816: Client info {'program': 'Moonraker', 'version': 'v0.8.0-246-gea6df41'}
mcu 'mcu': got {'oid': 25, 'next_clock': 947415808, 'value': 31555, '#name': 'analog_in_state', '#sent_time': 263782.309264072, '#receive_time': 263782.34906078}
mcu 'mcu': got {'oid': 16, 'next_clock': 1031415808, 'value': 31637, '#name': 'analog_in_state', '#sent_time': 263782.519728655, '#receive_time': 263782.559024697}
mcu 'mcu': got {'oid': 25, 'next_clock': 1067415808, 'value': 31552, '#name': 'analog_in_state', '#sent_time': 263782.624416239, '#receive_time': 263782.64899503}
Loaded MCU 'mcu' 105 commands (v0.11.0-205-g5f0d252b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi2b=PI2,PI3,PI1 BUS_PINS_spi3a=PC11,PC12,PC10 BUS_PINS_spi4=PE13,PE14,PE12 BUS_PINS_spi5=PF8,PF9,PF7 BUS_PINS_spi5a=PH7,PF11,PH6 BUS_PINS_spi6=PG12,PG14,PG13 CLOCK_FREQ=400000000 MCU=stm32h743xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PH0,PH1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'CB1': Starting connect
mcu 'mcu': got {'oid': 16, 'next_clock': 1151415808, 'value': 31639, '#name': 'analog_in_state', '#sent_time': 263782.733070739, '#receive_time': 263782.859076364}
mcu 'mcu': got {'oid': 25, 'next_clock': 1187415808, 'value': 31553, '#name': 'analog_in_state', '#sent_time': 263782.733070739, '#receive_time': 263782.94894253}
mcu 'mcu': got {'oid': 16, 'next_clock': 1271415808, 'value': 31635, '#name': 'analog_in_state', '#sent_time': 263782.733070739, '#receive_time': 263783.158888781}
mcu 'mcu': got {'oid': 25, 'next_clock': 1307415808, 'value': 31553, '#name': 'analog_in_state', '#sent_time': 263782.733070739, '#receive_time': 263783.248913489}
Loaded MCU 'CB1' 113 commands (v0.11.0-241-gffb5105b / gcc: (Debian 10.2.1-6) 10.2.1 20210110 binutils: (GNU Binutils for Debian) 2.35.2)
MCU 'CB1' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
Configured MCU 'mcu' (1024 moves)
Configured MCU 'CB1' (1024 moves)
Starting heater checks for heater_bed
mcu 'CB1': got {'oid': 1, 'clock': 3096980494, 'query_ticks': 4936, 'next_sequence': 0, 'buffered': 0, 'fifo': 0, 'limit_count': 0, '#name': 'adxl345_status', '#sent_time': 263783.333788947, '#receive_time': 263783.334806864}
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (43.7, 11.0)    | (10.0, 10.0)
  1   | (97.5, 11.0)    | (63.8, 10.0)
  2   | (151.2, 11.0)   | (117.5, 10.0)
  3   | (204.9, 11.0)   | (171.2, 10.0)
  4   | (258.7, 11.0)   | (225.0, 10.0)
  5   | (258.7, 64.8)   | (225.0, 63.8)
  6   | (204.9, 64.8)   | (171.2, 63.8)
  7   | (151.2, 64.8)   | (117.5, 63.8)
  8   | (97.5, 64.8)    | (63.8, 63.8)
  9   | (43.7, 64.8)    | (10.0, 63.8)
  10  | (43.7, 118.5)   | (10.0, 117.5)
  11  | (97.5, 118.5)   | (63.8, 117.5)
  12  | (151.2, 118.5)  | (117.5, 117.5)
  13  | (204.9, 118.5)  | (171.2, 117.5)
  14  | (258.7, 118.5)  | (225.0, 117.5)
  15  | (258.7, 172.2)  | (225.0, 171.2)
  16  | (204.9, 172.2)  | (171.2, 171.2)
  17  | (151.2, 172.2)  | (117.5, 171.2)
  18  | (97.5, 172.2)   | (63.8, 171.2)
  19  | (43.7, 172.2)   | (10.0, 171.2)
  20  | (43.7, 226.0)   | (10.0, 225.0)
  21  | (97.5, 226.0)   | (63.8, 225.0)
  22  | (151.2, 226.0)  | (117.5, 225.0)
  23  | (204.9, 226.0)  | (171.2, 225.0)
  24  | (258.7, 226.0)  | (225.0, 225.0)
Starting heater checks for extruder
webhooks: registering remote method 'shutdown_machine' for connection id: 281473401416816
webhooks: registering remote method 'reboot_machine' for connection id: 281473401416816
webhooks: registering remote method 'pause_job_queue' for connection id: 281473401416816
webhooks: registering remote method 'start_job_queue' for connection id: 281473401416816
