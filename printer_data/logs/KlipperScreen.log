--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.3-10-g304e285
2023-07-12 07:36:31,316 [screen.py:main()] - KlipperScreen version: v0.3.3-10-g304e285
2023-07-12 07:36:31,831 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2023-07-12 07:36:31,835 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2023-07-12 07:36:31,863 [config.py:__init__()] - Configuration validated succesfuly
2023-07-12 07:36:31,864 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2023-07-12 07:36:32,004 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2023-07-12 07:36:32,004 [config.py:install_language()] - Using system lang
2023-07-12 07:36:32,005 [config.py:install_language()] - Using lang en
2023-07-12 07:36:32,041 [screen.py:__init__()] - Screen resolution: 1024x600
2023-07-12 07:36:32,044 [KlippyGtk.py:__init__()] - Font size: 20.7 (medium)
2023-07-12 07:36:38,448 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2023-07-12 07:36:38,461 [screen.py:set_screenblanking_timeout()] - Using DPMS
2023-07-12 07:36:38,478 [screen.py:initial_connection()] - Default printer: None
2023-07-12 07:36:38,478 [screen.py:connect_printer()] - Connecting to printer: Printer
2023-07-12 07:36:38,479 [screen.py:_load_panel()] - Loading panel: splash_screen
2023-07-12 07:36:38,479 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/splash_screen.py
2023-07-12 07:36:38,623 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2023-07-12 07:36:38,635 [KlippyWebsocket.py:connect()] - Attempting to connect
2023-07-12 07:36:38,672 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:36:38,693 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2023-07-12 07:36:38,695 [KlippyWebsocket.py:connect()] - Starting websocket thread
2023-07-12 07:36:38,711 [_logging.py:info()] - Websocket connected
2023-07-12 07:36:38,712 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2023-07-12 07:36:38,759 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:36:39,026 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 07:36:39,027 [screen.py:init_printer()] - Klipper not connected
2023-07-12 07:36:39,035 [screen.py:update_size()] - Size changed: 1024x600
2023-07-12 07:36:42,602 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:36:42,624 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 07:36:42,625 [screen.py:init_printer()] - Klipper not connected
2023-07-12 07:36:45,603 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2023-07-12 07:36:45,624 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2023-07-12 07:36:45,626 [screen.py:init_printer()] - Klipper not connected
2024-01-06 01:07:07,482 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 01:07:07,501 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2024-01-06 01:07:07,503 [screen.py:init_printer()] - Klipper not connected
2024-01-06 01:07:10,480 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 01:07:10,499 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2024-01-06 01:07:10,500 [screen.py:init_printer()] - Klipper not connected
2024-01-06 01:12:49,543 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-01-06 01:12:49,544 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2024-01-06 01:12:49,550 [screen.py:_load_panel()] - Loading panel: menu
2024-01-06 01:12:49,551 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/menu.py
2024-01-06 01:12:49,709 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2024-01-06 01:12:49,722 [menu.py:arrangeMenuItems()] - X > power
2024-01-06 01:12:49,728 [menu.py:evaluate_enable()] - moonraker connected True
2024-01-06 01:12:52,673 [screen.py:_load_panel()] - Loading panel: network
2024-01-06 01:12:52,673 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/network.py
2024-01-06 01:12:52,718 [network.py:__init__()] - Found wireless interfaces: ['wlan0']
2024-01-06 01:12:52,719 [network.py:__init__()] - Using NetworkManager
2024-01-06 01:12:53,161 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > network
2024-01-06 01:13:08,440 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 01:13:08,470 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2024-01-06 01:13:08,487 [menu.py:arrangeMenuItems()] - X > power
2024-01-06 01:13:08,495 [menu.py:evaluate_enable()] - moonraker connected True
2024-01-06 01:13:10,330 [screen.py:_load_panel()] - Loading panel: system
2024-01-06 01:13:10,330 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/system.py
2024-01-06 01:13:10,402 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/machine/update/status
2024-01-06 01:13:10,412 [system.py:update_program_info()] - Invalid KlipperScreen ?
2024-01-06 01:13:10,420 [system.py:update_program_info()] - Invalid crowsnest ?
2024-01-06 01:13:10,429 [system.py:update_program_info()] - Invalid klipper ?
2024-01-06 01:13:10,433 [system.py:_needs_update()] - mainsail v2.6.0 -> ?
2024-01-06 01:13:10,436 [system.py:update_program_info()] - Invalid mainsail-config ?
2024-01-06 01:13:10,445 [system.py:update_program_info()] - Invalid moonraker ?
2024-01-06 01:13:10,448 [system.py:update_program_info()] - Invalid print_area_bed_mesh ?
2024-01-06 01:13:10,457 [system.py:update_program_info()] - Invalid sonar ?
2024-01-06 01:13:10,463 [system.py:update_program_info()] - Invalid timelapse ?
2024-01-06 01:13:10,474 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > system
2024-01-06 01:13:10,494 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/machine/update/status?refresh=false
2024-01-06 01:13:10,496 [system.py:update_program_info()] - Invalid KlipperScreen ?
2024-01-06 01:13:10,500 [system.py:update_program_info()] - Invalid crowsnest ?
2024-01-06 01:13:10,502 [system.py:update_program_info()] - Invalid klipper ?
2024-01-06 01:13:10,505 [system.py:_needs_update()] - mainsail v2.6.0 -> ?
2024-01-06 01:13:10,507 [system.py:update_program_info()] - Invalid mainsail-config ?
2024-01-06 01:13:10,509 [system.py:update_program_info()] - Invalid moonraker ?
2024-01-06 01:13:10,512 [system.py:update_program_info()] - Invalid print_area_bed_mesh ?
2024-01-06 01:13:10,514 [system.py:update_program_info()] - Invalid sonar ?
2024-01-06 01:13:10,518 [system.py:update_program_info()] - Invalid timelapse ?
2024-01-06 01:13:27,471 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 01:13:27,502 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2024-01-06 01:13:27,518 [menu.py:arrangeMenuItems()] - X > power
2024-01-06 01:13:27,526 [menu.py:evaluate_enable()] - moonraker connected True
2024-01-06 01:13:29,306 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > system
2024-01-06 01:13:29,325 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/machine/update/status?refresh=false
2024-01-06 01:13:29,327 [system.py:update_program_info()] - Invalid KlipperScreen ?
2024-01-06 01:13:29,330 [system.py:update_program_info()] - Invalid crowsnest ?
2024-01-06 01:13:29,333 [system.py:update_program_info()] - Invalid klipper ?
2024-01-06 01:13:29,336 [system.py:_needs_update()] - mainsail v2.6.0 -> ?
2024-01-06 01:13:29,339 [system.py:update_program_info()] - Invalid mainsail-config ?
2024-01-06 01:13:29,342 [system.py:update_program_info()] - Invalid moonraker ?
2024-01-06 01:13:29,345 [system.py:update_program_info()] - Invalid print_area_bed_mesh ?
2024-01-06 01:13:29,347 [system.py:update_program_info()] - Invalid sonar ?
2024-01-06 01:13:29,352 [system.py:update_program_info()] - Invalid timelapse ?
2024-01-06 01:13:31,503 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 01:13:31,527 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2024-01-06 01:13:31,541 [menu.py:arrangeMenuItems()] - X > power
2024-01-06 01:13:31,547 [menu.py:evaluate_enable()] - moonraker connected True
2024-01-06 01:13:32,325 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > network
2024-01-06 01:14:36,636 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 01:14:36,661 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2024-01-06 01:14:36,675 [menu.py:arrangeMenuItems()] - X > power
2024-01-06 01:14:36,682 [menu.py:evaluate_enable()] - moonraker connected True
2024-01-06 01:14:39,169 [screen.py:_load_panel()] - Loading panel: settings
2024-01-06 01:14:39,170 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/settings.py
2024-01-06 01:14:39,470 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > settings
2024-01-06 01:15:46,623 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 01:15:46,640 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2024-01-06 01:15:46,651 [menu.py:arrangeMenuItems()] - X > power
2024-01-06 01:15:46,655 [menu.py:evaluate_enable()] - moonraker connected True
2024-01-06 01:15:48,975 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 01:15:48,986 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 01:17:11,725 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-01-06 01:17:11,726 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-01-06 01:17:11,729 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 01:17:11,811 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 01:17:11,830 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-06 01:17:11,832 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 01:17:11,908 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 01:17:11,927 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-06 01:17:11,939 [KlippyRest.py:send_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-01-06 01:17:22,466 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-06 01:17:22,497 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 01:17:22,521 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-06 01:17:22,526 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-06 01:17:22,542 [_logging.py:info()] - Websocket connected
2024-01-06 01:17:22,543 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-06 01:17:22,569 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 01:17:22,602 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2024-01-06 01:17:22,626 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 01:17:22,813 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 01:17:22,815 [printer.py:reinit()] - Klipper version: v0.11.0-241-gffb5105b
2024-01-06 01:17:22,815 [printer.py:reinit()] - # Extruders: 0
2024-01-06 01:17:22,816 [printer.py:reinit()] - # Temperature devices: 0
2024-01-06 01:17:22,816 [printer.py:reinit()] - # Fans: 0
2024-01-06 01:17:22,816 [printer.py:reinit()] - # Output pins: 0
2024-01-06 01:17:22,816 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 01:17:23,074 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-01-06 01:17:23,077 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-01-06 01:17:23,077 [printer.py:change_state()] - Adding callback for state: error
2024-01-06 01:17:23,101 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 01:17:23,103 [printer.py:init_temp_store()] - Temp store: []
2024-01-06 01:17:23,123 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 01:17:23,125 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 01:17:23,127 [files.py:initialize()] - Gcodes path: None
2024-01-06 01:17:23,127 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 01:17:23,129 [screen.py:init_printer()] - Printer initialized
2024-01-06 01:17:23,136 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 01:17:23,222 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 01:17:25,492 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 01:17:25,493 [printer.py:init_temp_store()] - Temp store: []
2024-01-06 01:17:25,522 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 01:17:25,525 [screen.py:init_tempstore()] - Temperature store size: 1200
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.3-10-g304e285
2024-01-06 15:47:28,165 [screen.py:main()] - KlipperScreen version: v0.3.3-10-g304e285
2024-01-06 15:47:28,442 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2024-01-06 15:47:28,446 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2024-01-06 15:47:28,472 [config.py:__init__()] - Configuration validated succesfuly
2024-01-06 15:47:28,473 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-01-06 15:47:28,583 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-01-06 15:47:28,584 [config.py:install_language()] - Using system lang
2024-01-06 15:47:28,585 [config.py:install_language()] - Using lang en
2024-01-06 15:47:28,619 [screen.py:__init__()] - Screen resolution: 1024x600
2024-01-06 15:47:28,622 [KlippyGtk.py:__init__()] - Font size: 20.7 (medium)
2024-01-06 15:47:30,319 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-01-06 15:47:30,336 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-01-06 15:47:30,358 [screen.py:initial_connection()] - Default printer: None
2024-01-06 15:47:30,359 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-06 15:47:30,360 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-01-06 15:47:30,360 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/splash_screen.py
2024-01-06 15:47:30,445 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 15:47:30,463 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-06 15:47:30,509 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 15:47:30,531 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-06 15:47:30,534 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-06 15:47:30,558 [_logging.py:info()] - Websocket connected
2024-01-06 15:47:30,559 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-06 15:47:30,597 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 15:47:30,652 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2024-01-06 15:47:30,654 [screen.py:init_printer()] - Klipper not connected
2024-01-06 15:47:30,665 [screen.py:update_size()] - Size changed: 1024x600
2024-01-06 15:47:34,310 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 15:47:34,334 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2024-01-06 15:47:34,338 [screen.py:init_printer()] - Klipper not connected
2024-01-06 15:47:37,303 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 15:47:37,325 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2024-01-06 15:47:37,358 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 15:47:37,554 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 15:47:37,556 [printer.py:reinit()] - Klipper version: v0.11.0-241-gffb5105b
2024-01-06 15:47:37,557 [printer.py:reinit()] - # Extruders: 0
2024-01-06 15:47:37,557 [printer.py:reinit()] - # Temperature devices: 0
2024-01-06 15:47:37,558 [printer.py:reinit()] - # Fans: 0
2024-01-06 15:47:37,558 [printer.py:reinit()] - # Output pins: 0
2024-01-06 15:47:37,559 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 15:47:37,807 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-01-06 15:47:37,809 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-01-06 15:47:37,810 [printer.py:change_state()] - Adding callback for state: error
2024-01-06 15:47:37,830 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 15:47:37,832 [printer.py:init_temp_store()] - Temp store: []
2024-01-06 15:47:37,855 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 15:47:37,857 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 15:47:37,858 [files.py:initialize()] - Gcodes path: None
2024-01-06 15:47:37,859 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 15:47:37,860 [screen.py:init_printer()] - Printer initialized
2024-01-06 15:47:37,864 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 15:47:37,938 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 15:47:40,303 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 15:47:40,305 [printer.py:init_temp_store()] - Temp store: []
2024-01-06 15:47:40,327 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 15:47:40,329 [screen.py:init_tempstore()] - Temperature store size: 1200
--------------------KlipperScreen Log Start--------------------
Git Version: v0.3.3-10-g304e285
2024-01-06 16:22:50,066 [screen.py:main()] - KlipperScreen version: v0.3.3-10-g304e285
2024-01-06 16:22:50,292 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2024-01-06 16:22:50,295 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2024-01-06 16:22:50,320 [config.py:__init__()] - Configuration validated succesfuly
2024-01-06 16:22:50,321 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-01-06 16:22:50,423 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-01-06 16:22:50,424 [config.py:install_language()] - Using system lang
2024-01-06 16:22:50,425 [config.py:install_language()] - Using lang en
2024-01-06 16:22:50,457 [screen.py:__init__()] - Screen resolution: 1024x600
2024-01-06 16:22:50,460 [KlippyGtk.py:__init__()] - Font size: 20.7 (medium)
2024-01-06 16:22:51,469 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-01-06 16:22:51,483 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-01-06 16:22:51,502 [screen.py:initial_connection()] - Default printer: None
2024-01-06 16:22:51,503 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-06 16:22:51,504 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-01-06 16:22:51,504 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/splash_screen.py
2024-01-06 16:22:51,581 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 16:22:51,597 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-06 16:22:51,628 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 16:22:51,650 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-06 16:22:51,652 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-06 16:22:51,666 [_logging.py:info()] - Websocket connected
2024-01-06 16:22:51,667 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-06 16:22:51,703 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 16:22:51,736 [KlippyRest.py:send_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/machine/device_power/devices
2024-01-06 16:22:51,758 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 16:22:51,792 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 16:22:51,795 [printer.py:reinit()] - Klipper version: v0.11.0-241-gffb5105b
2024-01-06 16:22:51,795 [printer.py:reinit()] - # Extruders: 0
2024-01-06 16:22:51,796 [printer.py:reinit()] - # Temperature devices: 0
2024-01-06 16:22:51,796 [printer.py:reinit()] - # Fans: 0
2024-01-06 16:22:51,796 [printer.py:reinit()] - # Output pins: 0
2024-01-06 16:22:51,797 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 16:22:52,048 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-01-06 16:22:52,050 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-01-06 16:22:52,051 [printer.py:change_state()] - Adding callback for state: error
2024-01-06 16:22:52,070 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 16:22:52,072 [printer.py:init_temp_store()] - Temp store: []
2024-01-06 16:22:52,093 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 16:22:52,096 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 16:22:52,097 [files.py:initialize()] - Gcodes path: None
2024-01-06 16:22:52,098 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 16:22:52,099 [screen.py:init_printer()] - Printer initialized
2024-01-06 16:22:52,104 [screen.py:update_size()] - Size changed: 1024x600
2024-01-06 16:22:52,276 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 16:22:52,346 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 16:22:54,051 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 16:22:54,057 [printer.py:init_temp_store()] - Temp store: []
2024-01-06 16:22:54,090 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 16:22:54,095 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 16:23:09,921 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-01-06 16:23:09,921 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2024-01-06 16:23:09,928 [screen.py:_load_panel()] - Loading panel: menu
2024-01-06 16:23:09,928 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/menu.py
2024-01-06 16:23:10,018 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2024-01-06 16:23:10,026 [menu.py:arrangeMenuItems()] - X > power
2024-01-06 16:23:10,030 [menu.py:evaluate_enable()] - moonraker connected True
2024-01-06 16:23:12,266 [screen.py:_load_panel()] - Loading panel: system
2024-01-06 16:23:12,266 [screen.py:_load_panel()] - Panel path: /home/biqu/KlipperScreen/panels/system.py
2024-01-06 16:23:12,332 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/machine/update/status
2024-01-06 16:23:12,344 [system.py:_needs_update()] - KlipperScreen v0.3.3-10 -> v0.3.8-26
2024-01-06 16:23:12,354 [system.py:_needs_update()] - crowsnest v4.0.2-2 -> v4.1.1-1
2024-01-06 16:23:12,364 [system.py:_needs_update()] - klipper v0.11.0-241 -> v0.12.0-60
2024-01-06 16:23:12,367 [system.py:_needs_update()] - mainsail v2.6.0 -> v2.9.1
2024-01-06 16:23:12,371 [system.py:_needs_update()] - mainsail-config v1.0.0-14 -> v1.2.1-0
2024-01-06 16:23:12,380 [system.py:_needs_update()] - moonraker v0.8.0-92 -> v0.8.0-243
2024-01-06 16:23:12,384 [system.py:_already_updated()] - print_area_bed_mesh v1.2.1-21
2024-01-06 16:23:12,394 [system.py:_needs_update()] - sonar v0.1.2-0 -> v0.1.3-1
2024-01-06 16:23:12,397 [system.py:_needs_update()] - system  -> 85
2024-01-06 16:23:12,401 [system.py:_needs_update()] - timelapse v0.0.1-132 -> v0.0.1-143
2024-01-06 16:23:12,412 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > system
2024-01-06 16:23:12,438 [KlippyRest.py:send_request()] - Sending request to http://127.0.0.1:7125/machine/update/status?refresh=false
2024-01-06 16:23:12,443 [system.py:_needs_update()] - KlipperScreen v0.3.3-10 -> v0.3.8-26
2024-01-06 16:23:12,446 [system.py:_needs_update()] - crowsnest v4.0.2-2 -> v4.1.1-1
2024-01-06 16:23:12,449 [system.py:_needs_update()] - klipper v0.11.0-241 -> v0.12.0-60
2024-01-06 16:23:12,452 [system.py:_needs_update()] - mainsail v2.6.0 -> v2.9.1
2024-01-06 16:23:12,454 [system.py:_needs_update()] - mainsail-config v1.0.0-14 -> v1.2.1-0
2024-01-06 16:23:12,456 [system.py:_needs_update()] - moonraker v0.8.0-92 -> v0.8.0-243
2024-01-06 16:23:12,458 [system.py:_already_updated()] - print_area_bed_mesh v1.2.1-21
2024-01-06 16:23:12,461 [system.py:_needs_update()] - sonar v0.1.2-0 -> v0.1.3-1
2024-01-06 16:23:12,464 [system.py:_needs_update()] - system  -> 85
2024-01-06 16:23:12,466 [system.py:_needs_update()] - timelapse v0.0.1-132 -> v0.0.1-143
2024-01-06 16:23:19,210 [KlippyGtk.py:Dialog()] - Showing dialog <Gtk.Dialog object at 0xffffb096e980 (GtkDialog at 0x3db36580)>
2024-01-06 16:23:20,943 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-01-06 16:23:20,944 [system.py:update_confirm()] - Updating full
2024-01-06 16:23:20,986 [KlippyGtk.py:Dialog()] - Showing dialog <Gtk.Dialog object at 0xffffb09696c0 (GtkDialog at 0x3dbce610)>
2024-01-06 16:23:20,989 [system.py:update_program()] - Sending machine.update.full
2024-01-06 16:30:02,962 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-01-06 16:30:02,963 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-31-g2527a12
2024-01-06 16:30:02,963 [functions.py:log_start()] - Python version: 3.9
2024-01-06 16:30:03,116 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2024-01-06 16:30:03,121 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2024-01-06 16:30:03,137 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-01-06 16:30:03,257 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-01-06 16:30:03,258 [config.py:install_language()] - Using system lang
2024-01-06 16:30:03,260 [config.py:install_language()] - Using lang en
2024-01-06 16:30:03,292 [screen.py:__init__()] - Screen resolution: 1024x600
2024-01-06 16:30:03,295 [KlippyGtk.py:__init__()] - Font size: 20.7 (medium)
2024-01-06 16:30:03,901 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-01-06 16:30:03,916 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-01-06 16:30:03,929 [screen.py:initial_connection()] - Default printer: None
2024-01-06 16:30:03,930 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-06 16:30:03,931 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-01-06 16:30:04,018 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 16:30:04,038 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-06 16:30:04,084 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 16:30:04,125 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-06 16:30:04,131 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-06 16:30:04,154 [_logging.py:info()] - Websocket connected
2024-01-06 16:30:04,155 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-06 16:30:04,487 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 16:30:04,510 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 16:30:04,512 [printer.py:configure_cameras()] - Cameras: []
2024-01-06 16:30:04,513 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-92-g504a3a7', 'missing_klippy_requirements': [], 'api_version': [1, 2, 1], 'api_version_string': '1.2.1'}
2024-01-06 16:30:04,513 [screen.py:init_klipper()] - Klipper not connected
2024-01-06 16:30:08,045 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 16:30:08,048 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-92-g504a3a7', 'missing_klippy_requirements': [], 'api_version': [1, 2, 1], 'api_version_string': '1.2.1'}
2024-01-06 16:30:08,048 [screen.py:init_klipper()] - Klipper not connected
2024-01-06 16:30:11,051 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 16:30:11,054 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-92-g504a3a7', 'missing_klippy_requirements': [], 'api_version': [1, 2, 1], 'api_version_string': '1.2.1'}
2024-01-06 16:30:11,054 [screen.py:init_klipper()] - Klipper not connected
2024-01-06 16:30:14,049 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 16:30:14,051 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-92-g504a3a7', 'missing_klippy_requirements': [], 'api_version': [1, 2, 1], 'api_version_string': '1.2.1'}
2024-01-06 16:30:14,052 [screen.py:init_klipper()] - Klipper not connected
2024-01-06 16:30:17,049 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 16:30:17,052 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'websockets', 'internal_transport', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-92-g504a3a7', 'missing_klippy_requirements': [], 'api_version': [1, 2, 1], 'api_version_string': '1.2.1'}
2024-01-06 16:30:17,052 [screen.py:init_klipper()] - Klipper not connected
2024-01-06 16:30:19,993 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=1024, height=600)
2024-01-06 16:30:20,045 [screen.py:init_klipper()] - Stopping Retries
2024-01-06 16:31:34,657 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-01-06 16:31:34,658 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-01-06 16:31:34,809 [base_panel.py:process_update()] - Update complete
2024-01-06 16:31:34,814 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 16:31:34,894 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 16:31:34,914 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-06 16:31:34,916 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 16:31:34,993 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 16:31:35,012 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-06 16:31:35,026 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-01-06 16:31:45,028 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-06 16:31:45,050 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 16:31:45,073 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-06 16:31:45,075 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-06 16:31:45,092 [_logging.py:info()] - Websocket connected
2024-01-06 16:31:45,092 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-06 16:31:45,139 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 16:31:45,173 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 16:31:45,175 [printer.py:configure_cameras()] - Cameras: []
2024-01-06 16:31:45,176 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-243-g84a8538', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 16:31:45,210 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 16:31:45,452 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 16:31:45,454 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 16:31:45,454 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 16:31:45,455 [printer.py:reinit()] - # Extruders: 0
2024-01-06 16:31:45,455 [printer.py:reinit()] - # Temperature devices: 0
2024-01-06 16:31:45,455 [printer.py:reinit()] - # Fans: 0
2024-01-06 16:31:45,455 [printer.py:reinit()] - # Output pins: 0
2024-01-06 16:31:45,456 [printer.py:reinit()] - # Leds: 0
2024-01-06 16:31:45,477 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 16:31:45,479 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 16:31:45,708 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-01-06 16:31:45,710 [files.py:initialize()] - Gcodes path: None
2024-01-06 16:31:45,711 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 16:31:45,712 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 16:31:45,714 [screen.py:init_klipper()] - Printer initialized
2024-01-06 16:31:45,714 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-01-06 16:31:45,715 [printer.py:change_state()] - Adding callback for state: error
2024-01-06 16:31:45,719 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 16:31:45,791 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 16:32:32,387 [base_panel.py:finish_updating()] - Finishing update
2024-01-06 16:32:32,403 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-01-06 16:32:32,404 [screen.py:_menu_go_back()] - #### Menu go home
2024-01-06 16:32:32,407 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 17:32:33,030 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-06 18:07:35,151 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-06 18:07:35,163 [screen.py:wake_screen()] - Screen wake up
2024-01-06 18:07:53,744 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-01-06 18:07:53,744 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2024-01-06 18:07:53,748 [screen.py:_load_panel()] - Loading panel: menu
2024-01-06 18:07:53,768 [menu.py:evaluate_enable()] - moonraker connected True
2024-01-06 18:07:53,837 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2024-01-06 18:07:53,844 [menu.py:arrangeMenuItems()] - X > power
2024-01-06 18:07:53,847 [menu.py:evaluate_enable()] - moonraker connected True
2024-01-06 18:07:55,729 [screen.py:_load_panel()] - Loading panel: system
2024-01-06 18:07:55,813 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/machine/system_info
2024-01-06 18:07:55,884 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen >  > system
2024-01-06 18:07:55,932 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': None, 'github_requests_remaining': None, 'github_limit_reset_time': None, 'version_info': {'system': {'package_count': 0, 'package_list': []}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-243', 'remote_version': 'v0.8.0-243', 'rollback_version': 'v0.8.0-243', 'current_hash': '84a8538597fe3f052f00808a0f174c71bc096566', 'remote_hash': '84a8538597fe3f052f00808a0f174c71bc096566', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-243-g84a85385', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['moonraker/components/timelapse.py']"]}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-60', 'remote_version': 'v0.12.0-60', 'rollback_version': 'v0.12.0-60', 'current_hash': '0665dc89766bd85c095f18ba84028dc47def2f19', 'remote_hash': '0665dc89766bd85c095f18ba84028dc47def2f19', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-60-g0665dc89', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.2.1-0', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.9.1', 'remote_version': 'v2.9.1', 'rollback_version': 'v2.9.1', 'configured_type': 'web', 'channel': 'stable', 'info_tags': [], 'last_error': '', 'is_valid': True, 'warnings': [], 'anomalies': []}, 'crowsnest': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'crowsnest', 'remote_url': 'https://github.com/mainsail-crew/crowsnest.git', 'recovery_url': 'https://github.com/mainsail-crew/crowsnest.git', 'version': 'v4.1.1-1', 'remote_version': 'v4.1.1-1', 'rollback_version': 'v4.1.1-1', 'current_hash': 'f7ac6aa298143f0019eae9b2b2be8039196ebeda', 'remote_hash': 'f7ac6aa298143f0019eae9b2b2be8039196ebeda', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v4.1.1-1-gf7ac6aa', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'sonar': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'sonar', 'remote_url': 'https://github.com/mainsail-crew/sonar.git', 'recovery_url': 'https://github.com/mainsail-crew/sonar.git', 'version': 'v0.1.3-1', 'remote_version': 'v0.1.3-1', 'rollback_version': 'v0.1.3-1', 'current_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'remote_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.1.3-1-geacc498', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'timelapse': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'moonraker-timelapse', 'remote_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'recovery_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'version': 'v0.0.1-143', 'remote_version': 'v0.0.1-143', 'rollback_version': 'v0.0.1-143', 'current_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'remote_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.1-143-gc7fff11', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'KlipperScreen', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'recovery_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'version': 'v0.3.8-31', 'remote_version': 'v0.3.8-31', 'rollback_version': 'v0.3.8-31', 'current_hash': '2527a12d32a4e9a7d9feece4213413c57e197566', 'remote_hash': '2527a12d32a4e9a7d9feece4213413c57e197566', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.3.8-31-g2527a12', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': ['Unofficial remote url: https://github.com/KlipperScreen/KlipperScreen.git']}, 'print_area_bed_mesh': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Turge08', 'repo_name': 'print_area_bed_mesh', 'remote_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'recovery_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'version': 'v1.2.1-21', 'remote_version': 'v1.2.1-21', 'rollback_version': 'v1.2.1-21', 'current_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'remote_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-21-g53451c9', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 4}
2024-01-06 18:07:59,251 [KlippyGtk.py:Dialog()] - Showing dialog Shutdown (width=1024, height=600)
2024-01-06 18:08:03,123 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-01-06 18:17:06,987 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-01-06 18:17:06,988 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-31-g2527a12
2024-01-06 18:17:06,989 [functions.py:log_start()] - Python version: 3.9
2024-01-06 18:17:07,339 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2024-01-06 18:17:07,344 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2024-01-06 18:17:07,393 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-01-06 18:17:07,698 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-01-06 18:17:07,701 [config.py:install_language()] - Using system lang
2024-01-06 18:17:07,702 [config.py:install_language()] - Using lang en
2024-01-06 18:17:07,793 [screen.py:__init__()] - Screen resolution: 1024x600
2024-01-06 18:17:07,798 [KlippyGtk.py:__init__()] - Font size: 20.7 (medium)
2024-01-06 18:17:10,001 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-01-06 18:17:10,023 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-01-06 18:17:10,040 [screen.py:initial_connection()] - Default printer: None
2024-01-06 18:17:10,041 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-06 18:17:10,042 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-01-06 18:17:10,118 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:17:10,133 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-06 18:17:10,152 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-01-06 18:17:20,161 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-06 18:17:20,199 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 18:17:20,232 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-06 18:17:20,235 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-06 18:17:20,253 [_logging.py:info()] - Websocket connected
2024-01-06 18:17:20,254 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-06 18:17:20,283 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 18:17:20,307 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 18:17:20,310 [printer.py:configure_cameras()] - Cameras: []
2024-01-06 18:17:20,311 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'authorization', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-243-g84a8538', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 18:17:20,339 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 18:17:20,555 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 18:17:20,556 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 18:17:20,557 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 18:17:20,558 [printer.py:reinit()] - # Extruders: 0
2024-01-06 18:17:20,558 [printer.py:reinit()] - # Temperature devices: 0
2024-01-06 18:17:20,558 [printer.py:reinit()] - # Fans: 0
2024-01-06 18:17:20,558 [printer.py:reinit()] - # Output pins: 0
2024-01-06 18:17:20,558 [printer.py:reinit()] - # Leds: 0
2024-01-06 18:17:20,580 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 18:17:20,582 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 18:17:20,812 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-01-06 18:17:20,813 [files.py:initialize()] - Gcodes path: None
2024-01-06 18:17:20,814 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 18:17:20,815 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 18:17:20,817 [screen.py:init_klipper()] - Printer initialized
2024-01-06 18:17:20,817 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-01-06 18:17:20,818 [printer.py:change_state()] - Adding callback for state: error
2024-01-06 18:17:20,824 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:17:20,893 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:23:59,822 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-01-06 18:23:59,823 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-06 18:23:59,825 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-06 18:23:59,829 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:23:59,935 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:24:03,181 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 18:24:03,201 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 18:24:03,204 [printer.py:configure_cameras()] - Cameras: []
2024-01-06 18:24:03,204 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'authorization', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-243-g84a8538', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 18:24:03,902 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 18:24:03,965 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 18:24:03,968 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 18:24:03,972 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 18:24:03,972 [printer.py:reinit()] - # Extruders: 1
2024-01-06 18:24:03,972 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 18:24:03,972 [printer.py:reinit()] - # Fans: 1
2024-01-06 18:24:03,972 [printer.py:reinit()] - # Output pins: 1
2024-01-06 18:24:03,973 [printer.py:reinit()] - # Leds: 0
2024-01-06 18:24:03,996 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 18:24:03,999 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 18:24:04,264 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 18:24:04,287 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:04,289 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:24:04,290 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 18:24:04,291 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 18:24:04,292 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 18:24:04,294 [screen.py:init_klipper()] - Printer initialized
2024-01-06 18:24:04,295 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-06 18:24:04,295 [printer.py:change_state()] - Adding callback for state: startup
2024-01-06 18:24:09,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:09,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:24:14,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:14,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:24:19,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:19,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:24:24,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:24,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:24:29,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:29,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:24:34,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:34,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:24:39,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:39,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:24:44,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:44,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:24:49,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:49,198 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:24:50,302 [printer.py:change_state()] - Changing state from 'startup' to 'disconnected'
2024-01-06 18:24:50,303 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-06 18:24:50,306 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-06 18:24:50,312 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:24:50,411 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:24:54,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:54,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:24:54,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 18:24:54,212 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 18:24:54,214 [printer.py:configure_cameras()] - Cameras: []
2024-01-06 18:24:54,214 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'authorization', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-243-g84a8538', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 18:24:54,234 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 18:24:54,264 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 18:24:54,267 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 18:24:54,271 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 18:24:54,271 [printer.py:reinit()] - # Extruders: 1
2024-01-06 18:24:54,272 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 18:24:54,272 [printer.py:reinit()] - # Fans: 1
2024-01-06 18:24:54,273 [printer.py:reinit()] - # Output pins: 1
2024-01-06 18:24:54,273 [printer.py:reinit()] - # Leds: 0
2024-01-06 18:24:54,295 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 18:24:54,298 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 18:24:54,596 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 18:24:54,665 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:54,668 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:24:54,669 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 18:24:54,669 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 18:24:54,671 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 18:24:54,673 [screen.py:init_klipper()] - Printer initialized
2024-01-06 18:24:54,674 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-06 18:24:54,675 [printer.py:change_state()] - Adding callback for state: startup
2024-01-06 18:24:59,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:24:59,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:00,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:00,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:04,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:04,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:05,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:05,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:09,209 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:09,212 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:10,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:10,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:14,178 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:14,180 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:15,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:15,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:19,176 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:19,178 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:20,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:20,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:24,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:24,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:25,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:25,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:29,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:29,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:30,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:30,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:34,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:34,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:35,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:35,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:39,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:39,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:40,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:40,175 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:44,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:44,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:45,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:45,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:49,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:49,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:50,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:50,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:54,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:54,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:55,183 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:55,185 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:25:59,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:25:59,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:00,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:00,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:04,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:04,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:05,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:05,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:09,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:09,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:10,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:10,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:14,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:14,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:15,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:15,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:19,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:19,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:20,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:20,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:22,799 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-01-06 18:26:22,800 [printer.py:change_state()] - Adding callback for state: error
2024-01-06 18:26:22,807 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:26:22,893 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:26:24,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:24,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:25,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:25,192 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:29,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:29,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:30,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:30,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:34,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:34,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:35,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:35,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:39,176 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:39,178 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:40,181 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:40,182 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:44,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:44,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:45,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:45,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:49,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:49,192 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:50,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:50,192 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:54,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:54,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:55,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:55,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:26:59,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:26:59,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:00,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:00,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:04,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:04,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:05,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:05,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:09,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:09,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:10,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:10,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:14,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:14,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:15,179 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:15,181 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:19,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:19,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:20,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:20,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:24,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:24,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:25,211 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:25,214 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:29,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:29,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:30,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:30,192 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:34,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:34,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:35,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:35,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:39,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:39,198 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:40,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:40,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:44,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:44,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:45,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:45,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:49,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:49,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:50,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:50,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:54,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:54,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:55,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:55,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:27:59,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:27:59,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:00,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:00,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:04,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:04,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:05,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:05,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:09,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:09,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:10,199 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:10,202 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:14,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:14,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:15,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:15,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:19,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:19,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:20,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:20,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:24,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:24,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:25,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:25,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:29,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:29,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:30,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:30,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:34,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:34,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:35,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:35,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:39,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:39,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:40,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:40,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:44,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:44,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:45,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:45,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:49,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:49,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:50,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:50,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:54,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:54,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:55,199 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:55,203 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:28:59,201 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:28:59,204 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:00,201 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:00,205 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:04,201 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:04,204 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:05,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:05,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:09,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:09,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:10,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:10,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:14,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:14,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:15,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:15,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:19,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:19,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:20,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:20,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:24,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:24,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:25,176 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:25,179 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:29,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:29,198 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:30,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:30,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:34,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:34,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:35,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:35,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:39,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:39,198 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:40,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:40,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:44,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:44,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:45,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:45,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:49,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:49,198 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:50,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:50,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:54,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:54,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:55,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:55,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:29:59,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:29:59,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:00,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:00,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:04,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:04,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:05,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:05,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:09,176 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:09,178 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:10,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:10,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:14,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:14,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:15,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:15,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:19,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:19,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:20,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:20,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:24,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:24,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:25,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:25,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:29,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:29,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:30,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:30,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:34,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:34,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:35,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:35,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:39,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:39,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:40,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:40,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:44,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:44,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:45,177 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:45,179 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:49,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:49,198 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:50,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:50,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:54,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:54,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:55,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:55,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:30:59,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:30:59,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:00,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:00,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:04,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:04,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:05,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:05,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:09,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:09,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:10,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:10,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:14,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:14,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:15,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:15,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:19,176 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:19,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:20,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:20,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:24,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:24,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:25,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:25,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:29,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:29,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:30,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:30,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:34,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:34,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:35,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:35,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:39,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:39,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:40,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:40,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:44,181 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:44,183 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:45,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:45,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:49,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:49,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:50,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:50,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:54,182 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:54,184 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:55,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:55,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:31:59,197 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:31:59,200 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:00,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:00,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:04,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:04,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:05,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:05,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:09,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:09,198 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:10,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:10,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:14,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:14,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:15,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:15,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:19,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:19,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:20,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:20,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:24,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:24,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:25,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:25,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:29,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:29,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:30,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:30,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:34,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:34,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:35,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:35,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:39,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:39,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:40,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:40,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:44,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:44,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:45,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:45,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:49,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:49,192 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:50,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:50,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:54,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:54,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:55,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:55,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:32:59,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:32:59,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:00,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:00,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:04,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:04,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:05,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:05,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:09,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:09,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:10,201 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:10,205 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:14,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:14,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:15,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:15,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:19,178 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:19,180 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:20,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:20,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:24,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:24,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:25,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:25,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:29,176 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:29,178 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:30,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:30,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:34,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:34,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:35,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:35,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:39,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:39,198 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:40,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:40,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:44,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:44,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:45,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:45,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:49,176 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:49,178 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:50,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:50,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:54,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:54,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:55,201 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:55,204 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:33:59,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:33:59,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:00,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:00,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:04,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:04,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:05,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:05,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:09,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:09,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:10,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:10,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:14,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:14,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:15,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:15,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:19,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:19,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:20,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:20,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:24,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:24,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:25,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:25,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:29,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:29,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:30,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:30,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:34,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:34,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:35,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:35,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:39,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:39,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:40,199 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:40,203 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:44,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:44,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:45,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:45,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:49,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:49,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:50,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:50,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:54,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:54,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:55,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:55,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:34:59,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:34:59,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:00,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:00,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:04,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:04,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:05,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:05,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:09,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:09,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:10,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:10,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:14,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:14,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:15,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:15,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:19,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:19,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:20,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:20,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:24,184 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:24,187 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:25,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:25,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:29,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:29,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:30,182 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:30,184 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:34,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:34,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:35,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:35,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:39,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:39,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:40,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:40,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:44,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:44,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:45,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:45,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:49,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:49,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:50,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:50,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:54,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:54,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:55,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:55,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:35:59,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:35:59,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:00,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:00,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:04,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:04,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:05,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:05,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:09,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:09,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:10,198 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:10,201 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:14,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:14,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:15,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:15,175 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:19,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:19,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:20,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:20,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:24,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:24,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:25,180 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:25,182 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:29,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:29,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:30,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:30,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:34,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:34,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:35,180 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:35,183 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:39,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:39,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:40,181 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:40,183 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:44,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:44,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:45,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:45,187 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:49,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:49,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:50,198 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:50,200 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:50,672 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-01-06 18:36:50,673 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-06 18:36:50,674 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-06 18:36:50,678 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:36:50,755 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:36:54,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:54,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:54,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 18:36:54,211 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 18:36:54,212 [printer.py:configure_cameras()] - Cameras: []
2024-01-06 18:36:54,213 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'authorization', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-243-g84a8538', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 18:36:54,233 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 18:36:54,471 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 18:36:54,475 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 18:36:54,478 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 18:36:54,479 [printer.py:reinit()] - # Extruders: 1
2024-01-06 18:36:54,479 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 18:36:54,479 [printer.py:reinit()] - # Fans: 1
2024-01-06 18:36:54,480 [printer.py:reinit()] - # Output pins: 1
2024-01-06 18:36:54,480 [printer.py:reinit()] - # Leds: 0
2024-01-06 18:36:54,502 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 18:36:54,504 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 18:36:54,775 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 18:36:54,794 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:54,796 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:54,797 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 18:36:54,797 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 18:36:54,798 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 18:36:54,801 [screen.py:init_klipper()] - Printer initialized
2024-01-06 18:36:54,802 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-01-06 18:36:54,802 [printer.py:change_state()] - Adding callback for state: error
2024-01-06 18:36:54,807 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:36:54,879 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:36:55,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:55,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:36:59,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:36:59,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:00,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:00,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:00,232 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:00,238 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:04,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:04,187 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:05,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:05,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:05,226 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:05,229 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:09,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:09,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:10,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:10,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:10,226 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:10,229 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:14,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:14,191 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:15,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:15,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:15,224 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:15,227 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:19,180 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:19,182 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:20,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:20,175 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:20,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:20,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:24,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:24,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:25,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:25,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:25,217 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:25,220 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:29,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:29,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:30,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:30,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:30,226 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:30,228 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:34,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:34,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:35,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:35,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:35,226 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:35,229 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:39,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:39,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:40,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:40,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:40,229 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:40,232 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:44,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:44,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:45,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:45,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:45,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:45,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:49,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:49,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:50,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:50,189 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:50,217 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:50,219 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:54,189 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:54,192 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:55,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:55,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:55,220 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:55,222 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:37:59,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:37:59,198 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:00,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:00,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:00,219 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:00,221 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:04,197 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:04,200 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:05,182 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:05,185 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:05,209 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:05,211 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:09,177 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:09,178 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:10,055 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-01-06 18:38:10,056 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-06 18:38:10,060 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-06 18:38:10,064 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:38:10,144 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:38:10,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:10,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:10,205 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:10,207 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:13,184 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 18:38:13,204 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 18:38:13,206 [printer.py:configure_cameras()] - Cameras: []
2024-01-06 18:38:13,207 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'authorization', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-243-g84a8538', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 18:38:13,436 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 18:38:13,473 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 18:38:13,477 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 18:38:13,481 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 18:38:13,482 [printer.py:reinit()] - # Extruders: 1
2024-01-06 18:38:13,482 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 18:38:13,482 [printer.py:reinit()] - # Fans: 1
2024-01-06 18:38:13,483 [printer.py:reinit()] - # Output pins: 1
2024-01-06 18:38:13,483 [printer.py:reinit()] - # Leds: 0
2024-01-06 18:38:13,505 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 18:38:13,508 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 18:38:13,776 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 18:38:13,795 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:13,797 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:13,798 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 18:38:13,798 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 18:38:13,799 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 18:38:13,801 [screen.py:init_klipper()] - Printer initialized
2024-01-06 18:38:13,802 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-06 18:38:13,802 [printer.py:change_state()] - Adding callback for state: startup
2024-01-06 18:38:14,178 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:14,180 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:15,180 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:15,182 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:15,202 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:15,204 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:19,199 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:19,202 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:19,236 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:19,239 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:20,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:20,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:20,197 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:20,199 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:24,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:24,199 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:24,239 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:24,242 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:25,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:25,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:25,197 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:25,199 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:29,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:29,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:29,238 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:29,241 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:30,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:30,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:30,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:30,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:34,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:34,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:34,233 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:34,236 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:35,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:35,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:35,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:35,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:39,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:39,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:39,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:39,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:40,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:40,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:40,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:40,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:44,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:44,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:44,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:44,229 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:45,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:45,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:45,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:45,227 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:49,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:49,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:49,233 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:49,235 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:50,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:50,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:50,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:50,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:54,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:54,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:54,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:54,230 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:55,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:55,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:55,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:55,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:59,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:59,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:38:59,231 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:38:59,235 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:00,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:00,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:00,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:00,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:04,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:04,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:04,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:04,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:05,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:05,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:05,228 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:05,231 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:09,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:09,197 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:09,230 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:09,234 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:10,176 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:10,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:10,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:10,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:14,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:14,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:14,229 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:14,232 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:15,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:15,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:15,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:15,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:19,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:19,198 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:19,230 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:19,233 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:20,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:20,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:20,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:20,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:24,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:24,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:24,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:24,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:25,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:25,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:25,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:25,227 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:29,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:29,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:29,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:29,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:30,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:30,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:30,226 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:30,229 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:34,177 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:34,179 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:34,200 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:34,202 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:35,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:35,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:35,226 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:35,229 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:39,176 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:39,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:39,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:39,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:40,181 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:40,183 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:40,206 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:40,209 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:43,481 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-01-06 18:39:43,482 [printer.py:change_state()] - Adding callback for state: error
2024-01-06 18:39:43,485 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:39:43,552 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:39:44,173 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:44,175 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:44,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:44,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:45,177 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:45,179 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:45,199 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:45,202 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:49,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:49,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:49,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:49,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:50,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:50,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:50,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:50,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:54,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:54,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:54,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:54,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:55,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:55,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:55,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:55,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:59,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:59,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:39:59,228 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:39:59,231 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:00,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:00,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:00,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:00,228 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:04,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:04,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:04,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:04,228 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:05,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:05,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:05,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:05,228 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:09,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:09,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:09,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:09,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:10,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:10,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:10,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:10,228 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:14,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:14,175 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:14,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:14,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:15,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:15,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:15,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:15,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:19,187 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:19,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:19,217 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:19,220 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:20,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:20,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:20,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:20,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:24,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:24,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:24,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:24,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:25,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:25,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:25,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:25,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:29,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:29,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:29,218 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:29,221 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:30,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:30,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:30,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:30,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:34,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:34,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:34,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:34,230 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:35,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:35,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:35,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:35,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:39,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:39,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:39,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:39,230 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:40,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:40,175 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:40,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:40,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:44,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:44,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:44,216 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:44,218 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:45,201 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:45,205 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:45,235 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:45,237 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:49,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:49,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:49,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:49,230 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:50,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:50,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:50,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:50,230 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:54,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:54,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:54,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:54,229 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:55,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:55,192 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:55,215 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:55,218 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:59,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:59,198 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:40:59,230 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:40:59,233 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:00,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:00,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:00,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:00,228 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:04,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:04,187 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:04,215 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:04,218 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:05,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:05,190 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:05,217 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:05,220 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:09,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:09,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:09,228 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:09,231 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:10,183 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:10,185 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:10,202 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:10,204 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:14,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:14,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:14,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:14,228 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:15,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:15,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:15,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:15,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:19,192 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:19,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:19,227 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:19,230 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:20,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:20,188 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:20,215 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:20,217 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:24,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:24,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:24,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:24,229 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:25,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:25,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:25,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:25,228 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:29,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:29,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:29,228 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:29,231 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:30,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:30,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:30,222 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:30,224 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:34,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:34,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:34,226 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:34,229 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:35,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:35,187 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:35,215 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:35,217 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:39,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:39,196 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:39,229 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:39,232 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:40,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:40,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:40,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:40,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:44,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:44,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:44,223 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:44,226 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:45,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:45,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:45,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:45,228 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:49,201 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:49,205 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:49,238 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:49,241 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:50,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:50,177 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:50,194 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:50,195 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:54,190 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:54,193 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:54,225 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:54,228 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:54,317 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-01-06 18:41:54,662 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-01-06 18:41:54,662 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-06 18:41:54,664 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-06 18:41:54,668 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:41:54,734 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:41:55,180 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:55,182 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:55,205 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:55,208 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:58,177 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 18:41:58,195 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 18:41:58,197 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '12016adc-fe7c-4e38-820a-6ee747ee1d5a'}]
2024-01-06 18:41:58,198 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'authorization', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-243-g84a8538', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 18:41:58,218 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 18:41:58,248 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 18:41:58,251 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 18:41:58,255 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 18:41:58,255 [printer.py:reinit()] - # Extruders: 1
2024-01-06 18:41:58,256 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 18:41:58,256 [printer.py:reinit()] - # Fans: 1
2024-01-06 18:41:58,257 [printer.py:reinit()] - # Output pins: 1
2024-01-06 18:41:58,257 [printer.py:reinit()] - # Leds: 0
2024-01-06 18:41:58,279 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 18:41:58,282 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 18:41:58,551 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 18:41:58,573 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:58,575 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:58,576 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 18:41:58,576 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 18:41:58,577 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 18:41:58,579 [screen.py:init_klipper()] - Printer initialized
2024-01-06 18:41:58,580 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-06 18:41:58,580 [printer.py:change_state()] - Adding callback for state: startup
2024-01-06 18:41:59,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:59,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:41:59,197 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:41:59,199 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:42:00,174 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:42:00,176 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:42:00,193 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:42:00,194 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 18:42:00,791 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-06 18:42:00,792 [printer.py:change_state()] - Adding callback for state: ready
2024-01-06 18:42:00,798 [screen.py:_load_panel()] - Loading panel: main_menu
2024-01-06 18:42:00,963 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-06 18:42:00,975 [main_menu.py:add_device()] - Adding device: extruder
2024-01-06 18:42:00,985 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-06 18:42:01,041 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 18:42:01,044 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2024-01-06 18:42:04,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:42:04,241 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 18:42:04,262 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 18:42:04,264 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 18:42:04,282 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:42:04,300 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 18:42:04,321 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 18:42:04,323 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 18:42:04,340 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:42:04,358 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 18:42:04,377 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 18:42:04,379 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 18:42:05,175 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:42:05,193 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 18:42:05,212 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 18:42:05,214 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 18:42:05,231 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:42:05,249 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 18:42:05,269 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 18:42:05,271 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 18:42:11,071 [screen.py:_load_panel()] - Loading panel: move
2024-01-06 18:42:11,209 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-01-06 18:42:20,709 [screen.py:_load_panel()] - Loading panel: menu
2024-01-06 18:42:20,923 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-01-06 18:42:20,945 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-01-06 18:42:20,950 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-01-06 18:42:22,949 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-01-06 18:45:02,809 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-01-06 18:45:02,811 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-06 18:45:02,813 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-06 18:45:02,818 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:45:02,969 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:45:06,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 18:45:06,204 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 18:45:06,206 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '12016adc-fe7c-4e38-820a-6ee747ee1d5a'}]
2024-01-06 18:45:06,206 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'authorization', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-243-g84a8538', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 18:45:06,226 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 18:45:06,261 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 18:45:06,265 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 18:45:06,270 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 18:45:06,271 [printer.py:reinit()] - # Extruders: 1
2024-01-06 18:45:06,271 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 18:45:06,272 [printer.py:reinit()] - # Fans: 1
2024-01-06 18:45:06,272 [printer.py:reinit()] - # Output pins: 1
2024-01-06 18:45:06,272 [printer.py:reinit()] - # Leds: 0
2024-01-06 18:45:06,301 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 18:45:06,304 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 18:45:06,562 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 18:45:06,584 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:45:06,602 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 18:45:06,621 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 18:45:06,623 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 18:45:06,624 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 18:45:06,625 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 18:45:06,626 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 18:45:06,628 [screen.py:init_klipper()] - Printer initialized
2024-01-06 18:45:06,628 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-06 18:45:06,629 [printer.py:change_state()] - Adding callback for state: startup
2024-01-06 18:45:08,757 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-06 18:45:08,758 [printer.py:change_state()] - Adding callback for state: ready
2024-01-06 18:45:08,763 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:45:08,890 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-06 18:45:08,902 [main_menu.py:add_device()] - Adding device: extruder
2024-01-06 18:45:08,912 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-06 18:45:08,961 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 18:49:21,778 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=1024, height=600)
2024-01-06 18:49:23,587 [base_panel.py:process_update()] - Update complete
2024-01-06 18:49:23,723 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-01-06 18:49:23,725 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-01-06 18:49:23,731 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:49:23,839 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:49:23,865 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-06 18:49:23,868 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:49:23,954 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:49:23,976 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-06 18:49:23,987 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-01-06 18:49:34,160 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-06 18:49:34,179 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 18:49:34,197 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-06 18:49:34,199 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-06 18:49:34,211 [_logging.py:info()] - Websocket connected
2024-01-06 18:49:34,212 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-06 18:49:34,230 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 18:49:34,250 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 18:49:34,252 [printer.py:configure_cameras()] - Cameras: []
2024-01-06 18:49:34,253 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 18:49:34,276 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 18:49:34,321 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 18:49:34,324 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 18:49:34,328 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 18:49:34,328 [printer.py:reinit()] - # Extruders: 1
2024-01-06 18:49:34,329 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 18:49:34,329 [printer.py:reinit()] - # Fans: 1
2024-01-06 18:49:34,330 [printer.py:reinit()] - # Output pins: 1
2024-01-06 18:49:34,330 [printer.py:reinit()] - # Leds: 0
2024-01-06 18:49:34,352 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 18:49:34,355 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 18:49:34,621 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 18:49:34,641 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:49:34,658 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 18:49:34,677 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 18:49:34,679 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 18:49:34,680 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 18:49:34,681 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 18:49:34,682 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 18:49:34,683 [screen.py:init_klipper()] - Printer initialized
2024-01-06 18:49:34,684 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-01-06 18:49:34,685 [printer.py:change_state()] - Adding callback for state: ready
2024-01-06 18:49:34,690 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:49:34,821 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-06 18:49:34,834 [main_menu.py:add_device()] - Adding device: extruder
2024-01-06 18:49:34,847 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-06 18:49:34,896 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 18:58:54,086 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-01-06 18:58:54,087 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-06 18:58:54,090 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-06 18:58:54,094 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:58:54,181 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 18:58:57,183 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 18:58:57,205 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 18:58:57,206 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-06 18:58:57,207 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 18:58:57,488 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 18:58:57,529 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 18:58:57,532 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,-x'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', '-x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 18:58:57,537 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 18:58:57,537 [printer.py:reinit()] - # Extruders: 1
2024-01-06 18:58:57,538 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 18:58:57,538 [printer.py:reinit()] - # Fans: 1
2024-01-06 18:58:57,538 [printer.py:reinit()] - # Output pins: 1
2024-01-06 18:58:57,539 [printer.py:reinit()] - # Leds: 0
2024-01-06 18:58:57,563 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 18:58:57,565 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 18:58:57,834 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 18:58:57,862 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 18:58:57,877 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 18:58:57,898 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 18:58:57,900 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 18:58:57,901 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 18:58:57,901 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 18:58:57,902 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 18:58:57,904 [screen.py:init_klipper()] - Printer initialized
2024-01-06 18:58:57,905 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-06 18:58:57,905 [printer.py:change_state()] - Adding callback for state: startup
2024-01-06 18:59:00,289 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-06 18:59:00,290 [printer.py:change_state()] - Adding callback for state: ready
2024-01-06 18:59:00,302 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 18:59:00,441 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-06 18:59:00,455 [main_menu.py:add_device()] - Adding device: extruder
2024-01-06 18:59:00,466 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-06 18:59:00,517 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 19:09:46,726 [base_panel.py:finish_updating()] - Finishing update
2024-01-06 19:09:46,733 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-01-06 19:09:46,734 [screen.py:_menu_go_back()] - #### Menu go home
2024-01-06 19:09:46,751 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 19:09:53,519 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-01-06 19:09:53,519 [screen.py:_go_to_submenu()] - #### Menu __main
2024-01-06 19:09:53,544 [screen.py:_load_panel()] - Loading panel: menu
2024-01-06 19:09:53,944 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-06 19:09:53,952 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-06 19:09:53,969 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-06 19:09:53,981 [menu.py:arrangeMenuItems()] - X > more led
2024-01-06 19:09:53,998 [menu.py:arrangeMenuItems()] - X > more power
2024-01-06 19:09:54,029 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-06 19:10:02,475 [screen.py:_load_panel()] - Loading panel: camera
2024-01-06 19:10:07,240 [camera.py:__init__()] - {'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}
2024-01-06 19:10:07,306 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > camera
2024-01-06 19:10:07,306 [camera.py:play()] - camera URL is relative
2024-01-06 19:10:07,307 [camera.py:play()] - video filters: rotate:0.0
2024-01-06 19:10:07,481 [camera.py:play()] - Camera URL: http://127.0.0.1/webcam/?action=stream
2024-01-06 19:10:07,693 [camera.py:log()] - [warn] lavf: This format is marked by FFmpeg as having no timestamps!
2024-01-06 19:10:07,695 [camera.py:log()] - [warn] lavf: FFmpeg will likely make up its own broken timestamps. For
2024-01-06 19:10:07,696 [camera.py:log()] - [warn] lavf: video streams you can correct this with:
2024-01-06 19:10:07,698 [camera.py:log()] - [warn] lavf:     --no-correct-pts --fps=VALUE
2024-01-06 19:10:07,700 [camera.py:log()] - [warn] lavf: with VALUE being the real framerate of the stream. You can
2024-01-06 19:10:07,701 [camera.py:log()] - [warn] lavf: expect seeking and buffering estimation to be generally
2024-01-06 19:10:07,702 [camera.py:log()] - [warn] lavf: broken as well.
2024-01-06 19:10:07,704 [camera.py:log()] - [info] cplayer:  (+) Video --vid=1 (mjpeg)
2024-01-06 19:10:08,492 [camera.py:log()] - [fatal] vo/gpu: Could not create GLX context!
2024-01-06 19:10:08,585 [camera.py:log()] - [warn] vo/xv: Warning: this legacy VO has bad quality and performance, and will in particular result in blurry OSD and subtitles. You should fix your graphics drivers, or not force the xv VO.
2024-01-06 19:10:08,744 [camera.py:log()] - [warn] ffmpeg: swscaler: deprecated pixel format used, make sure you did set range correctly
2024-01-06 19:10:08,894 [camera.py:log()] - [info] autoconvert: Converting yuv444p -> yuv420p
2024-01-06 19:10:08,980 [camera.py:log()] - [info] cplayer: VO: [xv] 1920x1080 yuv420p
2024-01-06 19:10:21,064 [camera.py:play()] - Exiting Fullscreen
2024-01-06 19:10:21,093 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 19:10:21,135 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-06 19:10:21,146 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-06 19:10:21,163 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-06 19:10:21,176 [menu.py:arrangeMenuItems()] - X > more led
2024-01-06 19:10:21,194 [menu.py:arrangeMenuItems()] - X > more power
2024-01-06 19:10:21,229 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-06 19:10:37,999 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 19:10:38,053 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 19:18:01,156 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-01-06 19:18:01,157 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-31-g2527a12
2024-01-06 19:18:01,158 [functions.py:log_start()] - Python version: 3.9
2024-01-06 19:18:01,490 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2024-01-06 19:18:01,494 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2024-01-06 19:18:01,509 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-01-06 19:18:01,623 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-01-06 19:18:01,624 [config.py:install_language()] - Using system lang
2024-01-06 19:18:01,625 [config.py:install_language()] - Using lang en
2024-01-06 19:18:01,658 [screen.py:__init__()] - Screen resolution: 1024x600
2024-01-06 19:18:01,662 [KlippyGtk.py:__init__()] - Font size: 20.7 (medium)
2024-01-06 19:18:03,188 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-01-06 19:18:03,203 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-01-06 19:18:03,214 [screen.py:initial_connection()] - Default printer: None
2024-01-06 19:18:03,215 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-06 19:18:03,216 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-01-06 19:18:03,297 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 19:18:03,316 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-06 19:18:03,364 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 19:18:03,385 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-06 19:18:03,389 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-06 19:18:03,405 [_logging.py:info()] - Websocket connected
2024-01-06 19:18:03,406 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-06 19:18:03,692 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 19:18:03,711 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 19:18:03,713 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-06 19:18:03,714 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 19:18:03,714 [screen.py:init_klipper()] - Klipper not connected
2024-01-06 19:18:07,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 19:18:07,034 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 19:18:07,034 [screen.py:init_klipper()] - Klipper not connected
2024-01-06 19:18:10,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 19:18:10,035 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 19:18:10,057 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 19:18:10,094 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 19:18:10,098 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,-x'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', '-x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 19:18:10,103 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 19:18:10,103 [printer.py:reinit()] - # Extruders: 1
2024-01-06 19:18:10,104 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 19:18:10,104 [printer.py:reinit()] - # Fans: 1
2024-01-06 19:18:10,105 [printer.py:reinit()] - # Output pins: 1
2024-01-06 19:18:10,105 [printer.py:reinit()] - # Leds: 0
2024-01-06 19:18:10,136 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 19:18:10,140 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 19:18:10,401 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 19:18:10,422 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 19:18:10,424 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-06 19:18:10,425 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 19:18:10,425 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 19:18:10,427 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 19:18:10,428 [screen.py:init_klipper()] - Printer initialized
2024-01-06 19:18:10,429 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-06 19:18:10,430 [printer.py:change_state()] - Adding callback for state: startup
2024-01-06 19:18:12,861 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-06 19:18:12,862 [printer.py:change_state()] - Adding callback for state: ready
2024-01-06 19:18:12,868 [screen.py:_load_panel()] - Loading panel: main_menu
2024-01-06 19:18:12,997 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-06 19:18:13,009 [main_menu.py:add_device()] - Adding device: extruder
2024-01-06 19:18:13,020 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-06 19:18:13,071 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 19:18:13,074 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2024-01-06 19:18:16,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 19:18:16,057 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 19:18:16,096 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 19:18:16,100 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 20:03:16,825 [heatergraph.py:event_cb()] - Graph area: 419.86358642578125 232.71014404296875
2024-01-06 20:04:39,264 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-01-06 20:04:39,265 [printer.py:change_state()] - Adding callback for state: shutdown
2024-01-06 20:04:39,286 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 20:04:39,404 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 20:25:55,456 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-01-06 20:25:55,519 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-01-06 20:25:55,520 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-06 20:25:55,522 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-06 20:25:55,526 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 20:25:55,633 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 20:25:59,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 20:25:59,050 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 20:25:59,052 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-06 20:25:59,052 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 20:25:59,074 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 20:25:59,110 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 20:25:59,114 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,-x'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', '-x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 20:25:59,118 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 20:25:59,119 [printer.py:reinit()] - # Extruders: 1
2024-01-06 20:25:59,119 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 20:25:59,120 [printer.py:reinit()] - # Fans: 1
2024-01-06 20:25:59,121 [printer.py:reinit()] - # Output pins: 1
2024-01-06 20:25:59,121 [printer.py:reinit()] - # Leds: 0
2024-01-06 20:25:59,150 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 20:25:59,154 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 20:25:59,409 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 20:25:59,447 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 20:25:59,454 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 20:25:59,475 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 20:25:59,477 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 20:25:59,478 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 20:25:59,478 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 20:25:59,479 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 20:25:59,481 [screen.py:init_klipper()] - Printer initialized
2024-01-06 20:25:59,482 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-06 20:25:59,482 [printer.py:change_state()] - Adding callback for state: startup
2024-01-06 20:26:01,604 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-06 20:26:01,605 [printer.py:change_state()] - Adding callback for state: ready
2024-01-06 20:26:01,611 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 20:26:01,830 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-06 20:26:01,846 [main_menu.py:add_device()] - Adding device: extruder
2024-01-06 20:26:01,857 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-06 20:26:01,915 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 21:25:56,015 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-06 22:04:44,718 [KlippyWebsocket.py:get_file_dir()] - Sending server.files.directory gcodes/.thumbs
2024-01-06 22:09:04,231 [files.py:add_file()] - File already exists: CE6_BTT_PAD7_ADXL345_Mount.gcode
2024-01-06 22:09:14,103 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-01-06 22:09:14,104 [printer.py:change_state()] - Adding callback for state: printing
2024-01-06 22:09:14,106 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-06 22:09:14,161 [screen.py:wake_screen()] - Screen wake up
2024-01-06 22:09:14,227 [screen.py:_load_panel()] - Loading panel: job_status
2024-01-06 22:09:14,528 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-06 22:09:14,543 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-06 22:09:14,576 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_BTT_PAD7_ADXL345_Mount.gcode Size: 827466
2024-01-06 22:09:14,597 [job_status.py:show_file_thumbnail()] - CE6_BTT_PAD7_ADXL345_Mount.gcode
2024-01-06 22:30:38,110 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-01-06 22:30:39,093 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-01-06 22:30:39,093 [printer.py:change_state()] - Adding callback for state: ready
2024-01-06 22:33:41,684 [job_status.py:close_panel()] - Closing job_status panel
2024-01-06 22:33:41,689 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 22:33:41,804 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-06 22:33:41,816 [main_menu.py:add_device()] - Adding device: extruder
2024-01-06 22:33:41,826 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-06 22:33:41,876 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 22:33:43,782 [screen.py:_load_panel()] - Loading panel: move
2024-01-06 22:33:43,905 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-01-06 22:33:50,828 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-01-06 22:33:50,835 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-01-06 22:33:51,426 [screen.py:show_popup_message()] - error: Must home axis first: 260.000 285.000 15.672 [916.535]
2024-01-06 22:33:55,232 [screen.py:_load_panel()] - Loading panel: menu
2024-01-06 22:33:55,399 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-01-06 22:33:55,422 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-01-06 22:33:55,427 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-01-06 22:33:56,666 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-01-06 22:34:24,956 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 22:34:24,991 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-01-06 22:34:50,597 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-01-06 22:34:50,603 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-01-06 22:34:54,160 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-01-06 22:34:54,170 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-01-06 22:35:14,325 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-25 F600'}
2024-01-06 22:35:14,331 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-01-06 22:35:14,348 [screen.py:show_popup_message()] - error: Move out of range: 175.700 162.000 -15.012 [916.535]
2024-01-06 22:35:18,965 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-01-06 22:35:18,973 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-01-06 22:35:26,069 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-01-06 22:35:26,074 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-01-06 22:35:33,694 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-01-06 22:35:33,701 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-01-06 22:38:33,122 [move.py:change_distance()] - ### Distance 50
2024-01-06 22:38:34,029 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-01-06 22:38:34,034 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-01-06 22:50:24,586 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-01-06 22:50:24,587 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-06 22:50:24,589 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-06 22:50:24,592 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 22:50:24,661 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 22:50:28,035 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 22:50:28,056 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 22:50:28,058 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-06 22:50:28,059 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 22:50:28,146 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 22:50:28,186 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 22:50:28,189 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 22:50:28,194 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 22:50:28,195 [printer.py:reinit()] - # Extruders: 1
2024-01-06 22:50:28,195 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 22:50:28,195 [printer.py:reinit()] - # Fans: 1
2024-01-06 22:50:28,195 [printer.py:reinit()] - # Output pins: 1
2024-01-06 22:50:28,196 [printer.py:reinit()] - # Leds: 0
2024-01-06 22:50:28,219 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 22:50:28,222 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 22:50:28,495 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 22:50:28,533 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 22:50:28,541 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 22:50:28,568 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 22:50:28,571 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 22:50:28,572 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 22:50:28,572 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 22:50:28,574 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 22:50:28,575 [screen.py:init_klipper()] - Printer initialized
2024-01-06 22:50:28,576 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-06 22:50:28,577 [printer.py:change_state()] - Adding callback for state: startup
2024-01-06 22:50:30,942 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-06 22:50:30,942 [printer.py:change_state()] - Adding callback for state: ready
2024-01-06 22:50:30,950 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 22:50:31,066 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-06 22:50:31,078 [main_menu.py:add_device()] - Adding device: extruder
2024-01-06 22:50:31,088 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-06 22:50:31,160 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 22:52:54,368 [screen.py:show_popup_message()] - error: Must home axis first: 150.700 137.000 135.000 [0.000]
2024-01-06 22:53:18,297 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 22:53:18,462 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-01-06 22:53:19,924 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 22:53:20,127 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-01-06 22:53:20,157 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-01-06 22:53:20,164 [menu.py:arrangeMenuItems()] - X > homing Z-Tilt
2024-01-06 22:53:21,560 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-01-06 22:53:38,943 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 22:53:38,990 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-01-06 22:53:40,468 [screen_panel.py:load_menu()] - loading menu options
2024-01-06 22:53:46,078 [screen_panel.py:unload_menu()] - self.menu: ['move_menu', 'options_menu']
2024-01-06 22:53:48,428 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 22:53:48,464 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 22:53:51,100 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-01-06 22:53:51,101 [screen.py:_go_to_submenu()] - #### Menu __main
2024-01-06 22:53:51,110 [screen.py:_load_panel()] - Loading panel: menu
2024-01-06 22:53:51,560 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-06 22:53:51,569 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-06 22:53:51,589 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-06 22:53:51,603 [menu.py:arrangeMenuItems()] - X > more led
2024-01-06 22:53:51,622 [menu.py:arrangeMenuItems()] - X > more power
2024-01-06 22:53:51,662 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-06 22:53:58,642 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-01-06 22:53:58,710 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-01-06 22:54:04,973 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 22:54:05,035 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-06 22:54:05,046 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-06 22:54:05,063 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-06 22:54:05,076 [menu.py:arrangeMenuItems()] - X > more led
2024-01-06 22:54:05,095 [menu.py:arrangeMenuItems()] - X > more power
2024-01-06 22:54:05,129 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-06 22:54:09,430 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-01-06 22:54:11,172 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 22:54:11,226 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-06 22:54:11,242 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-06 22:54:11,259 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-06 22:54:11,272 [menu.py:arrangeMenuItems()] - X > more led
2024-01-06 22:54:11,290 [menu.py:arrangeMenuItems()] - X > more power
2024-01-06 22:54:11,334 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-06 22:54:11,972 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 22:54:12,017 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 22:54:23,372 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-01-06 22:54:23,373 [screen.py:_go_to_submenu()] - #### Menu __main
2024-01-06 22:54:23,431 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-06 22:54:23,445 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-06 22:54:23,469 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-06 22:54:23,481 [menu.py:arrangeMenuItems()] - X > more led
2024-01-06 22:54:23,500 [menu.py:arrangeMenuItems()] - X > more power
2024-01-06 22:54:23,541 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-06 22:54:25,374 [screen.py:_load_panel()] - Loading panel: console
2024-01-06 22:54:25,471 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-01-06 22:54:48,687 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: 
2024-01-06 22:55:07,600 [keyboard.py:__init__()] - Keyboard en
2024-01-06 22:55:07,947 [screen.py:update_size()] - Size changed: 1024x600
2024-01-06 22:55:14,423 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console > gcode_macros
2024-01-06 22:55:16,366 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 22:55:16,424 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-01-06 22:55:18,224 [keyboard.py:__init__()] - Keyboard en
2024-01-06 22:56:02,235 [keyboard.py:__init__()] - Keyboard en
2024-01-06 22:56:21,031 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TEST_RESONANCES AXIS=X
2024-01-06 22:59:11,440 [keyboard.py:__init__()] - Keyboard en
2024-01-06 22:59:27,100 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2024-01-06 22:59:27,219 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-01-06 22:59:27,220 [printer.py:change_state()] - Adding callback for state: shutdown
2024-01-06 22:59:27,254 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 22:59:27,334 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 22:59:29,939 [KlippyWebsocket.py:connect()] - Already connected
2024-01-06 22:59:33,031 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 22:59:33,050 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 22:59:33,053 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-06 22:59:33,054 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'shutdown', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 22:59:33,089 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 22:59:33,226 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 22:59:33,230 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 22:59:33,234 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 22:59:33,235 [printer.py:reinit()] - # Extruders: 1
2024-01-06 22:59:33,235 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 22:59:33,236 [printer.py:reinit()] - # Fans: 1
2024-01-06 22:59:33,236 [printer.py:reinit()] - # Output pins: 1
2024-01-06 22:59:33,236 [printer.py:reinit()] - # Leds: 0
2024-01-06 22:59:33,263 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 22:59:33,267 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 22:59:33,544 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 22:59:33,584 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 22:59:33,591 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 22:59:33,613 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 22:59:33,615 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 22:59:33,616 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 22:59:33,617 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 22:59:33,618 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 22:59:33,620 [screen.py:init_klipper()] - Printer initialized
2024-01-06 22:59:53,923 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-01-06 22:59:53,924 [screen.py:_go_to_submenu()] - #### Menu __splashscreen
2024-01-06 22:59:53,929 [screen.py:_load_panel()] - Loading panel: menu
2024-01-06 22:59:53,944 [menu.py:evaluate_enable()] - moonraker connected True
2024-01-06 22:59:54,026 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen > 
2024-01-06 22:59:54,039 [menu.py:arrangeMenuItems()] - X > power
2024-01-06 22:59:54,043 [menu.py:evaluate_enable()] - moonraker connected True
2024-01-06 23:00:02,694 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 23:00:02,706 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 23:00:04,916 [KlippyWebsocket.py:restart()] - Sending printer.restart
2024-01-06 23:00:04,960 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-01-06 23:00:04,961 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-06 23:00:04,963 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-06 23:00:04,966 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 23:00:05,039 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 23:00:08,041 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 23:00:08,067 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 23:00:08,069 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-06 23:00:08,070 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 23:00:08,751 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 23:00:08,798 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 23:00:08,806 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 23:00:08,812 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 23:00:08,813 [printer.py:reinit()] - # Extruders: 1
2024-01-06 23:00:08,813 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 23:00:08,813 [printer.py:reinit()] - # Fans: 1
2024-01-06 23:00:08,814 [printer.py:reinit()] - # Output pins: 1
2024-01-06 23:00:08,814 [printer.py:reinit()] - # Leds: 0
2024-01-06 23:00:08,841 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 23:00:08,844 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 23:00:09,115 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 23:00:09,156 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 23:00:09,165 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 23:00:09,188 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 23:00:09,191 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 23:00:09,192 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 23:00:09,192 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 23:00:09,194 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 23:00:09,196 [screen.py:init_klipper()] - Printer initialized
2024-01-06 23:00:09,197 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-06 23:00:09,197 [printer.py:change_state()] - Adding callback for state: startup
2024-01-06 23:00:10,296 [printer.py:change_state()] - Changing state from 'startup' to 'error'
2024-01-06 23:00:10,297 [printer.py:change_state()] - Adding callback for state: error
2024-01-06 23:00:10,302 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 23:00:10,379 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 23:00:14,099 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-01-06 23:00:14,171 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-01-06 23:00:14,171 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-06 23:00:14,172 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-06 23:00:14,175 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 23:00:14,254 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 23:00:18,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 23:00:18,064 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 23:00:18,067 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-06 23:00:18,069 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 23:00:18,104 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 23:00:18,148 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 23:00:18,152 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '25.64', 'shaper_freq_y': '29.27', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 25.64, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 29.27}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 23:00:18,158 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 23:00:18,159 [printer.py:reinit()] - # Extruders: 1
2024-01-06 23:00:18,160 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 23:00:18,160 [printer.py:reinit()] - # Fans: 1
2024-01-06 23:00:18,161 [printer.py:reinit()] - # Output pins: 1
2024-01-06 23:00:18,161 [printer.py:reinit()] - # Leds: 0
2024-01-06 23:00:18,199 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 23:00:18,203 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 23:00:18,452 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 23:00:18,492 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 23:00:18,498 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 23:00:18,525 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 23:00:18,527 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 23:00:18,528 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 23:00:18,529 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 23:00:18,531 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 23:00:18,533 [screen.py:init_klipper()] - Printer initialized
2024-01-06 23:00:18,534 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-06 23:00:18,536 [printer.py:change_state()] - Adding callback for state: startup
2024-01-06 23:00:20,910 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-06 23:00:20,911 [printer.py:change_state()] - Adding callback for state: ready
2024-01-06 23:00:20,919 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 23:00:21,057 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-06 23:00:21,072 [main_menu.py:add_device()] - Adding device: extruder
2024-01-06 23:00:21,083 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-06 23:00:21,142 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 23:00:26,310 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 23:00:26,385 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > gcode_macros
2024-01-06 23:00:27,907 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 23:00:27,964 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 23:00:29,667 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-01-06 23:00:29,668 [screen.py:_go_to_submenu()] - #### Menu __main
2024-01-06 23:00:29,681 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 23:00:30,231 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-06 23:00:30,241 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-06 23:00:30,261 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-06 23:00:30,274 [menu.py:arrangeMenuItems()] - X > more led
2024-01-06 23:00:30,295 [menu.py:arrangeMenuItems()] - X > more power
2024-01-06 23:00:30,338 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-06 23:00:31,134 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 23:00:31,242 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-01-06 23:00:54,616 [keyboard.py:__init__()] - Keyboard en
2024-01-06 23:01:43,426 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-06 23:01:43,503 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-06 23:01:43,526 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-06 23:01:43,554 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-06 23:01:43,582 [menu.py:arrangeMenuItems()] - X > more led
2024-01-06 23:01:43,619 [menu.py:arrangeMenuItems()] - X > more power
2024-01-06 23:01:43,683 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-06 23:02:44,475 [screen.py:show_popup_message()] - error: Must home axis first: 150.700 137.000 135.000 [0.000]
2024-01-06 23:16:25,352 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-01-06 23:16:25,352 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-06 23:16:25,354 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-06 23:16:25,360 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 23:16:25,449 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-06 23:16:29,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-06 23:16:29,059 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-06 23:16:29,062 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-06 23:16:29,062 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-06 23:16:29,090 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-06 23:16:29,124 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-06 23:16:29,127 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '62.2', 'shaper_freq_y': '62.8', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 62.2, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 62.8}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-06 23:16:29,132 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-06 23:16:29,133 [printer.py:reinit()] - # Extruders: 1
2024-01-06 23:16:29,133 [printer.py:reinit()] - # Temperature devices: 1
2024-01-06 23:16:29,133 [printer.py:reinit()] - # Fans: 1
2024-01-06 23:16:29,134 [printer.py:reinit()] - # Output pins: 1
2024-01-06 23:16:29,134 [printer.py:reinit()] - # Leds: 0
2024-01-06 23:16:29,157 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-06 23:16:29,160 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-06 23:16:29,435 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-06 23:16:29,473 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-06 23:16:29,480 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-06 23:16:29,501 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-06 23:16:29,503 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-06 23:16:29,504 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-06 23:16:29,505 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-06 23:16:29,506 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-06 23:16:29,507 [screen.py:init_klipper()] - Printer initialized
2024-01-06 23:16:29,508 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-06 23:16:29,509 [printer.py:change_state()] - Adding callback for state: startup
2024-01-06 23:16:31,622 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-06 23:16:31,623 [printer.py:change_state()] - Adding callback for state: ready
2024-01-06 23:16:31,629 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 23:16:31,778 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-06 23:16:31,803 [main_menu.py:add_device()] - Adding device: extruder
2024-01-06 23:16:31,820 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-06 23:16:31,919 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-06 23:24:04,185 [files.py:_callback()] - Error in getting metadata for .thumbs/Untitled-400x400.png. Retrying in 6 seconds
2024-01-06 23:24:04,188 [files.py:_callback()] - Error in getting metadata for .thumbs/Untitled-32x32.png. Retrying in 6 seconds
2024-01-06 23:24:31,645 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-01-06 23:24:31,646 [printer.py:change_state()] - Adding callback for state: printing
2024-01-06 23:24:31,668 [screen.py:show_panel()] - Reinitializing panel
2024-01-06 23:24:31,884 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-06 23:24:31,900 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-06 23:24:31,919 [job_status.py:update_file_metadata()] - Update Metadata. File: Untitled.gcode Size: 1792916
2024-01-06 23:24:31,935 [job_status.py:show_file_thumbnail()] - Untitled.gcode
2024-01-07 00:01:44,012 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-07 00:28:00,377 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-07 00:28:00,407 [screen.py:wake_screen()] - Screen wake up
2024-01-07 00:28:00,474 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-01-07 00:28:01,373 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-01-07 00:28:01,374 [printer.py:change_state()] - Adding callback for state: ready
2024-01-07 00:28:06,728 [job_status.py:close_panel()] - Closing job_status panel
2024-01-07 00:28:06,734 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 00:28:06,885 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-07 00:28:06,904 [main_menu.py:add_device()] - Adding device: extruder
2024-01-07 00:28:06,915 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-07 00:28:06,970 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-07 01:28:07,016 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-07 15:12:13,134 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-07 15:12:13,179 [screen.py:wake_screen()] - Screen wake up
2024-01-07 15:12:17,158 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-01-07 15:12:17,159 [screen.py:_go_to_submenu()] - #### Menu __main
2024-01-07 15:12:17,166 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 15:12:17,568 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-07 15:12:17,577 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-07 15:12:17,592 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-07 15:12:17,604 [menu.py:arrangeMenuItems()] - X > more led
2024-01-07 15:12:17,622 [menu.py:arrangeMenuItems()] - X > more power
2024-01-07 15:12:17,655 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-07 15:12:20,595 [screen.py:_load_panel()] - Loading panel: settings
2024-01-07 15:12:20,974 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-01-07 15:12:40,029 [screen_panel.py:switch_config_option()] - [main] show_heater_power toggled True
2024-01-07 15:12:40,032 [config.py:save_user_config_options()] - Creating a new config file in /home/biqu/printer_data/config/KlipperScreen.conf
2024-01-07 15:12:40,038 [printer.py:change_state()] - Adding callback for state: ready
2024-01-07 15:12:40,044 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 15:12:40,173 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-07 15:12:40,185 [main_menu.py:add_device()] - Adding device: extruder
2024-01-07 15:12:40,195 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-07 15:12:40,247 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-07 15:12:46,385 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-01-07 15:12:46,386 [screen.py:_go_to_submenu()] - #### Menu __main
2024-01-07 15:12:46,393 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 15:12:46,802 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-07 15:12:46,811 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-07 15:12:46,828 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-07 15:12:46,841 [menu.py:arrangeMenuItems()] - X > more led
2024-01-07 15:12:46,860 [menu.py:arrangeMenuItems()] - X > more power
2024-01-07 15:12:46,894 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-07 15:12:52,848 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 15:12:53,163 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-01-07 15:13:24,131 [screen_panel.py:on_dropdown_change()] - [main] theme changed to material-dark
2024-01-07 15:13:24,134 [config.py:save_user_config_options()] - Creating a new config file in /home/biqu/printer_data/config/KlipperScreen.conf
2024-01-07 15:13:31,094 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-01-07 15:13:31,095 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-31-g2527a12
2024-01-07 15:13:31,095 [functions.py:log_start()] - Python version: 3.9
2024-01-07 15:13:31,246 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2024-01-07 15:13:31,248 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-01-07 15:13:31,267 [config.py:log_config()] -  ===== Config File =====

=======================
2024-01-07 15:13:31,270 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
show_heater_power = True

=======================
2024-01-07 15:13:31,271 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-01-07 15:13:31,383 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-01-07 15:13:31,384 [config.py:install_language()] - Using system lang
2024-01-07 15:13:31,385 [config.py:install_language()] - Using lang en
2024-01-07 15:13:31,412 [screen.py:__init__()] - Screen resolution: 1024x600
2024-01-07 15:13:31,415 [KlippyGtk.py:__init__()] - Font size: 20.7 (medium)
2024-01-07 15:13:31,908 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-01-07 15:13:31,922 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-01-07 15:13:31,933 [screen.py:initial_connection()] - Default printer: None
2024-01-07 15:13:31,933 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-07 15:13:31,934 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-01-07 15:13:32,000 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-07 15:13:32,016 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-07 15:13:32,052 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-07 15:13:32,077 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-07 15:13:32,079 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-07 15:13:32,094 [_logging.py:info()] - Websocket connected
2024-01-07 15:13:32,095 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-07 15:13:32,378 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-07 15:13:32,397 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-07 15:13:32,399 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-07 15:13:32,400 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'authorization', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-07 15:13:32,422 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-07 15:13:32,508 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-07 15:13:32,512 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '62.2', 'shaper_freq_y': '62.8', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 62.2, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 62.8}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-07 15:13:32,516 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-07 15:13:32,516 [printer.py:reinit()] - # Extruders: 1
2024-01-07 15:13:32,517 [printer.py:reinit()] - # Temperature devices: 1
2024-01-07 15:13:32,517 [printer.py:reinit()] - # Fans: 1
2024-01-07 15:13:32,517 [printer.py:reinit()] - # Output pins: 1
2024-01-07 15:13:32,517 [printer.py:reinit()] - # Leds: 0
2024-01-07 15:13:32,542 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-07 15:13:32,545 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-07 15:13:32,825 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-07 15:13:32,863 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-07 15:13:32,869 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-07 15:13:32,891 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-07 15:13:32,893 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-07 15:13:32,894 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-07 15:13:32,894 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-07 15:13:32,895 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-07 15:13:32,897 [screen.py:init_klipper()] - Printer initialized
2024-01-07 15:13:32,898 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-01-07 15:13:32,899 [printer.py:change_state()] - Adding callback for state: ready
2024-01-07 15:13:32,905 [screen.py:_load_panel()] - Loading panel: main_menu
2024-01-07 15:13:33,038 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-07 15:13:33,051 [main_menu.py:add_device()] - Adding device: extruder
2024-01-07 15:13:33,060 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-07 15:13:33,110 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-07 15:13:38,998 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-01-07 15:13:38,999 [screen.py:_go_to_submenu()] - #### Menu __main
2024-01-07 15:13:39,008 [screen.py:_load_panel()] - Loading panel: menu
2024-01-07 15:13:39,374 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-07 15:13:39,382 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-07 15:13:39,398 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-07 15:13:39,411 [menu.py:arrangeMenuItems()] - X > more led
2024-01-07 15:13:39,428 [menu.py:arrangeMenuItems()] - X > more power
2024-01-07 15:13:39,459 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-07 15:13:46,602 [screen.py:_load_panel()] - Loading panel: system
2024-01-07 15:13:46,644 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/machine/system_info
2024-01-07 15:13:46,731 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > system
2024-01-07 15:13:46,831 [system.py:get_updates()] - {'jsonrpc': '2.0', 'result': {'github_rate_limit': None, 'github_requests_remaining': None, 'github_limit_reset_time': None, 'version_info': {'system': {'package_count': 0, 'package_list': []}, 'moonraker': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Arksine', 'repo_name': 'moonraker', 'remote_url': 'https://github.com/Arksine/moonraker.git', 'recovery_url': 'https://github.com/Arksine/moonraker.git', 'version': 'v0.8.0-244', 'remote_version': 'v0.8.0-244', 'rollback_version': 'v0.8.0-243', 'current_hash': '6e6388d673d471f629e1313851adde133f145874', 'remote_hash': '6e6388d673d471f629e1313851adde133f145874', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.8.0-244-g6e6388d6', 'pristine': False, 'corrupt': False, 'warnings': [], 'anomalies': ["Repo has untracked source files: ['moonraker/components/timelapse.py']"]}, 'klipper': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Klipper3d', 'repo_name': 'klipper', 'remote_url': 'https://github.com/Klipper3d/klipper', 'recovery_url': 'https://github.com/Klipper3d/klipper', 'version': 'v0.12.0-60', 'remote_version': 'v0.12.0-60', 'rollback_version': 'v0.12.0-60', 'current_hash': '0665dc89766bd85c095f18ba84028dc47def2f19', 'remote_hash': '0665dc89766bd85c095f18ba84028dc47def2f19', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.12.0-60-g0665dc89', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail-config': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'mainsail-config', 'remote_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'recovery_url': 'https://github.com/mainsail-crew/mainsail-config.git', 'version': 'v1.2.1-0', 'remote_version': 'v1.2.1-0', 'rollback_version': 'v1.2.1-0', 'current_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'remote_hash': 'e57810d51b5c634aadaca4db923bfcba269ae4b3', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-0-ge57810d5', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'mainsail': {'name': 'mainsail', 'repo_name': 'mainsail', 'owner': 'mainsail-crew', 'version': 'v2.9.1', 'remote_version': 'v2.9.1', 'rollback_version': 'v2.9.1', 'configured_type': 'web', 'channel': 'stable', 'info_tags': [], 'last_error': '', 'is_valid': True, 'warnings': [], 'anomalies': []}, 'crowsnest': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'mainsail-crew', 'repo_name': 'crowsnest', 'remote_url': 'https://github.com/mainsail-crew/crowsnest.git', 'recovery_url': 'https://github.com/mainsail-crew/crowsnest.git', 'version': 'v4.1.1-1', 'remote_version': 'v4.1.1-1', 'rollback_version': 'v4.1.1-1', 'current_hash': 'f7ac6aa298143f0019eae9b2b2be8039196ebeda', 'remote_hash': 'f7ac6aa298143f0019eae9b2b2be8039196ebeda', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v4.1.1-1-gf7ac6aa2', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'sonar': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'sonar', 'remote_url': 'https://github.com/mainsail-crew/sonar.git', 'recovery_url': 'https://github.com/mainsail-crew/sonar.git', 'version': 'v0.1.3-1', 'remote_version': 'v0.1.3-1', 'rollback_version': 'v0.1.3-1', 'current_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'remote_hash': 'eacc498a52f79292063b6f9b0e0c191c34c5dc09', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.1.3-1-geacc498a', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'timelapse': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'main', 'owner': 'mainsail-crew', 'repo_name': 'moonraker-timelapse', 'remote_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'recovery_url': 'https://github.com/mainsail-crew/moonraker-timelapse.git', 'version': 'v0.0.1-143', 'remote_version': 'v0.0.1-143', 'rollback_version': 'v0.0.1-143', 'current_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'remote_hash': 'c7fff11e542b95e0e15b8bb1443cea8159ac0274', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.0.1-143-gc7fff11e', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}, 'KlipperScreen': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'KlipperScreen', 'repo_name': 'KlipperScreen', 'remote_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'recovery_url': 'https://github.com/KlipperScreen/KlipperScreen.git', 'version': 'v0.3.8-31', 'remote_version': 'v0.3.8-31', 'rollback_version': 'v0.3.8-31', 'current_hash': '2527a12d32a4e9a7d9feece4213413c57e197566', 'remote_hash': '2527a12d32a4e9a7d9feece4213413c57e197566', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v0.3.8-31-g2527a12d', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': ['Unofficial remote url: https://github.com/KlipperScreen/KlipperScreen.git']}, 'print_area_bed_mesh': {'channel': 'dev', 'debug_enabled': False, 'channel_invalid': False, 'is_valid': True, 'configured_type': 'git_repo', 'info_tags': [], 'detected_type': 'git_repo', 'remote_alias': 'origin', 'branch': 'master', 'owner': 'Turge08', 'repo_name': 'print_area_bed_mesh', 'remote_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'recovery_url': 'https://github.com/Turge08/print_area_bed_mesh.git', 'version': 'v1.2.1-21', 'remote_version': 'v1.2.1-21', 'rollback_version': 'v1.2.1-21', 'current_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'remote_hash': '53451c9dedd331c2ead0fbd0f55ee15c37d41b1f', 'is_dirty': False, 'detached': False, 'commits_behind': [], 'commits_behind_count': 0, 'git_messages': [], 'full_version_string': 'v1.2.1-21-g53451c9d', 'pristine': True, 'corrupt': False, 'warnings': [], 'anomalies': []}}, 'busy': False}, 'id': 6}
2024-01-07 15:13:56,750 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-07 15:13:56,821 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-07 15:13:56,832 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-07 15:13:56,848 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-07 15:13:56,861 [menu.py:arrangeMenuItems()] - X > more led
2024-01-07 15:13:56,878 [menu.py:arrangeMenuItems()] - X > more power
2024-01-07 15:13:56,909 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-07 15:13:59,992 [screen.py:_load_panel()] - Loading panel: settings
2024-01-07 15:14:00,251 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-01-07 15:14:16,640 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-07 15:14:16,716 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-07 15:14:16,740 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-07 15:14:16,770 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-07 15:14:16,794 [menu.py:arrangeMenuItems()] - X > more led
2024-01-07 15:14:16,828 [menu.py:arrangeMenuItems()] - X > more power
2024-01-07 15:14:16,870 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-07 15:14:19,858 [screen.py:_load_panel()] - Loading panel: network
2024-01-07 15:14:19,949 [network.py:__init__()] - Found wireless interfaces: ['wlan0']
2024-01-07 15:14:19,950 [network.py:__init__()] - Using NetworkManager
2024-01-07 15:14:20,431 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > network
2024-01-07 15:14:31,798 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-07 15:14:31,839 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-07 15:14:31,852 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-07 15:14:31,868 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-07 15:14:31,881 [menu.py:arrangeMenuItems()] - X > more led
2024-01-07 15:14:31,899 [menu.py:arrangeMenuItems()] - X > more power
2024-01-07 15:14:31,932 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-07 15:14:41,786 [screen.py:_load_panel()] - Loading panel: limits
2024-01-07 15:14:41,809 [limits.py:add_option()] - Adding option: max_accel
2024-01-07 15:14:41,829 [limits.py:add_option()] - Adding option: max_accel_to_decel
2024-01-07 15:14:41,845 [limits.py:add_option()] - Adding option: max_velocity
2024-01-07 15:14:41,860 [limits.py:add_option()] - Adding option: square_corner_velocity
2024-01-07 15:14:41,928 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > limits
2024-01-07 15:14:50,894 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_VELOCITY_LIMIT VELOCITY=808.0
2024-01-07 15:14:57,511 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-07 15:14:57,577 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-07 15:14:57,588 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-07 15:14:57,603 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-07 15:14:57,621 [menu.py:arrangeMenuItems()] - X > more led
2024-01-07 15:14:57,645 [menu.py:arrangeMenuItems()] - X > more power
2024-01-07 15:14:57,678 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-07 15:14:59,365 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > settings
2024-01-07 15:15:30,974 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-07 15:15:31,012 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-01-07 15:15:31,024 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-01-07 15:15:31,041 [menu.py:arrangeMenuItems()] - X > more retraction
2024-01-07 15:15:31,053 [menu.py:arrangeMenuItems()] - X > more led
2024-01-07 15:15:31,070 [menu.py:arrangeMenuItems()] - X > more power
2024-01-07 15:15:31,108 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-01-07 15:15:32,888 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-07 15:15:32,925 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-07 15:27:00,806 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-01-07 15:27:00,807 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-31-g2527a12
2024-01-07 15:27:00,807 [functions.py:log_start()] - Python version: 3.9
2024-01-07 15:27:01,190 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2024-01-07 15:27:01,191 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-01-07 15:27:01,214 [config.py:log_config()] -  ===== Config File =====

=======================
2024-01-07 15:27:01,217 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
show_heater_power = True

=======================
2024-01-07 15:27:01,218 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-01-07 15:27:01,337 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-01-07 15:27:01,338 [config.py:install_language()] - Using system lang
2024-01-07 15:27:01,339 [config.py:install_language()] - Using lang en
2024-01-07 15:27:01,368 [screen.py:__init__()] - Screen resolution: 1024x600
2024-01-07 15:27:01,371 [KlippyGtk.py:__init__()] - Font size: 20.7 (medium)
2024-01-07 15:27:02,990 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-01-07 15:27:03,008 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-01-07 15:27:03,022 [screen.py:initial_connection()] - Default printer: None
2024-01-07 15:27:03,023 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-07 15:27:03,024 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-01-07 15:27:03,106 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-07 15:27:03,128 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-07 15:27:03,184 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-07 15:27:03,208 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-07 15:27:03,213 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-07 15:27:03,231 [_logging.py:info()] - Websocket connected
2024-01-07 15:27:03,231 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-07 15:27:03,552 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-07 15:27:03,572 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-07 15:27:03,574 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-07 15:27:03,575 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-07 15:27:03,575 [screen.py:init_klipper()] - Klipper not connected
2024-01-07 15:27:06,712 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-07 15:27:06,715 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-07 15:27:06,715 [screen.py:init_klipper()] - Klipper not connected
2024-01-07 15:27:09,719 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-07 15:27:09,721 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-07 15:27:09,760 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-01-07 15:27:12,710 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-07 15:27:12,729 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-07 15:27:12,731 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-07 15:27:12,732 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-07 15:27:12,753 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-07 15:27:12,873 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-07 15:27:12,876 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '500', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '62.2', 'shaper_freq_y': '62.8', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 62.2, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 62.8}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-07 15:27:12,881 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-07 15:27:12,881 [printer.py:reinit()] - # Extruders: 1
2024-01-07 15:27:12,881 [printer.py:reinit()] - # Temperature devices: 1
2024-01-07 15:27:12,882 [printer.py:reinit()] - # Fans: 1
2024-01-07 15:27:12,882 [printer.py:reinit()] - # Output pins: 1
2024-01-07 15:27:12,882 [printer.py:reinit()] - # Leds: 0
2024-01-07 15:27:12,907 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-07 15:27:12,910 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-07 15:27:13,151 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-07 15:27:13,215 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-07 15:27:13,218 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-07 15:27:13,219 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-07 15:27:13,219 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-07 15:27:13,220 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-07 15:27:13,222 [screen.py:init_klipper()] - Printer initialized
2024-01-07 15:27:13,223 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-01-07 15:27:13,224 [printer.py:change_state()] - Adding callback for state: ready
2024-01-07 15:27:13,231 [screen.py:_load_panel()] - Loading panel: main_menu
2024-01-07 15:27:13,356 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-07 15:27:13,372 [main_menu.py:add_device()] - Adding device: extruder
2024-01-07 15:27:13,381 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-07 15:27:13,429 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-07 15:27:13,433 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2024-01-07 15:27:18,723 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-07 15:27:18,765 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-07 15:27:18,805 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-07 15:27:18,808 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-07 15:29:04,111 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-01-07 15:29:04,112 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-07 15:29:04,114 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-07 15:29:04,118 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 15:29:04,195 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-07 15:29:07,711 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-07 15:29:07,732 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-07 15:29:07,736 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-07 15:29:07,736 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-07 15:29:07,764 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-07 15:29:07,803 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-07 15:29:07,807 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '5000', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '62.2', 'shaper_freq_y': '62.8', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 62.2, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 62.8}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 5000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-07 15:29:07,812 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-07 15:29:07,813 [printer.py:reinit()] - # Extruders: 1
2024-01-07 15:29:07,813 [printer.py:reinit()] - # Temperature devices: 1
2024-01-07 15:29:07,814 [printer.py:reinit()] - # Fans: 1
2024-01-07 15:29:07,814 [printer.py:reinit()] - # Output pins: 1
2024-01-07 15:29:07,815 [printer.py:reinit()] - # Leds: 0
2024-01-07 15:29:07,845 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-07 15:29:07,848 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-07 15:29:08,107 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-07 15:29:08,129 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-07 15:29:08,146 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-07 15:29:08,167 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-07 15:29:08,169 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-07 15:29:08,170 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-07 15:29:08,171 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-07 15:29:08,172 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-07 15:29:08,173 [screen.py:init_klipper()] - Printer initialized
2024-01-07 15:29:08,174 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-07 15:29:08,175 [printer.py:change_state()] - Adding callback for state: startup
2024-01-07 15:29:10,297 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-07 15:29:10,297 [printer.py:change_state()] - Adding callback for state: ready
2024-01-07 15:29:10,303 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 15:29:10,419 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-07 15:29:10,431 [main_menu.py:add_device()] - Adding device: extruder
2024-01-07 15:29:10,439 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-07 15:29:10,485 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-07 15:37:52,453 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-01-07 15:37:52,454 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-07 15:37:52,456 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-07 15:37:52,460 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 15:37:52,522 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-07 15:37:55,711 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-07 15:37:55,732 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-07 15:37:55,734 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-07 15:37:55,735 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-07 15:37:55,931 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-07 15:37:55,970 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-07 15:37:55,973 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '4000', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '62.2', 'shaper_freq_y': '62.8', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 62.2, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 62.8}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 4000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-07 15:37:55,978 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-07 15:37:55,979 [printer.py:reinit()] - # Extruders: 1
2024-01-07 15:37:55,979 [printer.py:reinit()] - # Temperature devices: 1
2024-01-07 15:37:55,980 [printer.py:reinit()] - # Fans: 1
2024-01-07 15:37:55,980 [printer.py:reinit()] - # Output pins: 1
2024-01-07 15:37:55,980 [printer.py:reinit()] - # Leds: 0
2024-01-07 15:37:56,004 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-07 15:37:56,006 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-07 15:37:56,274 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-07 15:37:56,304 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-07 15:37:56,318 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-07 15:37:56,338 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-07 15:37:56,341 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-07 15:37:56,342 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-07 15:37:56,342 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-07 15:37:56,344 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-07 15:37:56,345 [screen.py:init_klipper()] - Printer initialized
2024-01-07 15:37:56,347 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-07 15:37:56,347 [printer.py:change_state()] - Adding callback for state: startup
2024-01-07 15:37:58,718 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-07 15:37:58,719 [printer.py:change_state()] - Adding callback for state: ready
2024-01-07 15:37:58,724 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 15:37:58,834 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-07 15:37:58,846 [main_menu.py:add_device()] - Adding device: extruder
2024-01-07 15:37:58,855 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-07 15:37:58,900 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-07 16:27:03,694 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-07 18:14:31,922 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-07 18:14:31,966 [screen.py:wake_screen()] - Screen wake up
2024-01-07 18:14:40,548 [screen.py:_load_panel()] - Loading panel: temperature
2024-01-07 18:14:40,601 [temperature.py:add_device()] - Adding device: extruder
2024-01-07 18:14:40,611 [temperature.py:add_device()] - Adding device: heater_bed
2024-01-07 18:14:40,622 [temperature.py:select_heater()] - Selecting extruder
2024-01-07 18:14:40,624 [temperature.py:select_heater()] - Selecting heater_bed
2024-01-07 18:14:40,667 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-01-07 18:14:45,252 [temperature.py:select_heater()] - Deselecting extruder
2024-01-07 18:14:54,653 [temperature.py:verify_max_temp()] - 200/300
2024-01-07 18:14:54,654 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S200
2024-01-07 18:17:47,578 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-07 18:17:47,644 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-07 18:17:49,324 [screen.py:_load_panel()] - Loading panel: extrude
2024-01-07 18:17:49,424 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-01-07 18:17:49,428 [extrude.py:process_update()] - filament_motion_sensor encoder_sensor: {'filament_detected': True, 'enabled': False}
2024-01-07 18:17:56,410 [extrude.py:change_distance()] - ### Distance 25
2024-01-07 18:17:58,738 [extrude.py:change_speed()] - ### Speed 25
2024-01-07 18:17:59,884 [screen.py:show_popup_message()] - error: Macro LOAD_FILAMENT not found
2024-01-07 18:18:14,076 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-01-07 18:18:14,078 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2024-01-07 18:18:20,386 [extrude.py:change_speed()] - ### Speed 5
2024-01-07 18:18:25,501 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-01-07 18:18:25,504 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-01-07 18:18:31,890 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-01-07 18:18:31,891 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-01-07 18:18:46,434 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-07 18:18:46,466 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-07 18:18:49,595 [main_menu.py:toggle_visibility()] - Graph show False: extruder
2024-01-07 18:18:52,068 [main_menu.py:toggle_visibility()] - Graph show True: extruder
2024-01-07 18:18:56,614 [main_menu.py:verify_max_temp()] - 0/300
2024-01-07 18:18:56,614 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S0
2024-01-07 18:19:48,480 [files.py:_callback()] - Error in getting metadata for .thumbs/Preset Temperature Tower - PETG-400x400.png. Retrying in 6 seconds
2024-01-07 18:19:48,483 [files.py:_callback()] - Error in getting metadata for .thumbs/Preset Temperature Tower - PETG-32x32.png. Retrying in 6 seconds
2024-01-07 18:20:48,942 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-01-07 18:20:48,942 [printer.py:change_state()] - Adding callback for state: printing
2024-01-07 18:20:48,968 [screen.py:_load_panel()] - Loading panel: job_status
2024-01-07 18:20:49,180 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-07 18:20:49,196 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-07 18:20:49,223 [job_status.py:update_file_metadata()] - Update Metadata. File: Preset Temperature Tower - PETG.gcode Size: 519977
2024-01-07 18:20:49,242 [job_status.py:show_file_thumbnail()] - Preset Temperature Tower - PETG.gcode
2024-01-07 19:15:02,479 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-01-07 19:15:03,465 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-01-07 19:15:03,466 [printer.py:change_state()] - Adding callback for state: ready
2024-01-07 19:18:58,692 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-07 19:34:36,151 [files.py:_callback()] - Error in getting metadata for .thumbs/CE6_RepRackHangerPrintable_v1-400x400.png. Retrying in 6 seconds
2024-01-07 19:34:36,154 [files.py:_callback()] - Error in getting metadata for .thumbs/CE6_RepRackHangerPrintable_v1-32x32.png. Retrying in 6 seconds
2024-01-07 19:45:15,604 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'standby'
2024-01-07 19:45:26,385 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-01-07 19:45:26,385 [printer.py:change_state()] - Adding callback for state: printing
2024-01-07 19:45:26,399 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-07 19:45:26,402 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_RepRackHangerPrintable_v1.gcode Size: 5459066
2024-01-07 19:45:26,418 [job_status.py:show_file_thumbnail()] - CE6_RepRackHangerPrintable_v1.gcode
2024-01-07 19:45:26,424 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-07 19:45:26,446 [screen.py:wake_screen()] - Screen wake up
2024-01-07 19:45:26,514 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 19:45:26,702 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-07 19:45:26,714 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-07 19:45:26,732 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_RepRackHangerPrintable_v1.gcode Size: 5459066
2024-01-07 19:45:26,747 [job_status.py:show_file_thumbnail()] - CE6_RepRackHangerPrintable_v1.gcode
2024-01-07 20:08:37,255 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-01-07 20:08:37,255 [printer.py:change_state()] - Adding callback for state: paused
2024-01-07 20:08:37,270 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-01-07 20:08:37,357 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 20:08:37,534 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-07 20:08:37,546 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-01-07 20:08:37,564 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_RepRackHangerPrintable_v1.gcode Size: 5459066
2024-01-07 20:08:37,578 [job_status.py:show_file_thumbnail()] - CE6_RepRackHangerPrintable_v1.gcode
2024-01-07 20:08:37,590 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 20:08:37,680 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-01-07 20:08:37,685 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
2024-01-07 20:08:37,689 [extrude.py:process_update()] - filament_motion_sensor encoder_sensor: {'filament_detected': True, 'enabled': True}
2024-01-07 20:08:44,774 [printer.py:change_state()] - Changing state from 'paused' to 'ready'
2024-01-07 20:08:44,775 [printer.py:change_state()] - Adding callback for state: ready
2024-01-07 20:12:22,440 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-07 20:12:22,497 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-07 20:12:22,519 [job_status.py:set_state()] - Changing job_status state from 'paused' to 'standby'
2024-01-07 20:12:26,328 [job_status.py:close_panel()] - Closing job_status panel
2024-01-07 20:12:26,333 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 20:12:26,458 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-07 20:12:26,472 [main_menu.py:add_device()] - Adding device: extruder
2024-01-07 20:12:26,481 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-07 20:12:26,536 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-07 20:12:37,954 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-01-07 20:12:37,955 [printer.py:change_state()] - Adding callback for state: printing
2024-01-07 20:12:37,984 [screen.py:show_panel()] - Reinitializing panel
2024-01-07 20:12:38,154 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-07 20:12:38,168 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-07 20:12:38,200 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_RepRackHangerPrintable_v1.gcode Size: 5459066
2024-01-07 20:12:38,216 [job_status.py:show_file_thumbnail()] - CE6_RepRackHangerPrintable_v1.gcode
2024-01-07 21:12:26,697 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-07 21:33:02,772 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-07 21:33:02,818 [screen.py:wake_screen()] - Screen wake up
2024-01-07 21:33:09,835 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-01-07 21:33:09,960 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-01-07 21:33:17,527 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-07 21:33:17,562 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-07 21:33:17,588 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_RepRackHangerPrintable_v1.gcode Size: 5459066
2024-01-07 21:33:17,602 [job_status.py:show_file_thumbnail()] - CE6_RepRackHangerPrintable_v1.gcode
2024-01-07 21:33:18,631 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-01-07 21:33:18,632 [screen.py:_go_to_submenu()] - #### Menu __print
2024-01-07 21:33:18,639 [screen.py:_load_panel()] - Loading panel: menu
2024-01-07 21:33:19,041 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-01-07 21:33:19,068 [menu.py:arrangeMenuItems()] - X > move
2024-01-07 21:33:19,080 [menu.py:arrangeMenuItems()] - X > power
2024-01-07 21:33:19,087 [menu.py:arrangeMenuItems()] - X > led
2024-01-07 21:33:19,112 [menu.py:arrangeMenuItems()] - X > retraction
2024-01-07 21:33:19,119 [menu.py:arrangeMenuItems()] - X > spoolman
2024-01-07 21:33:20,617 [screen.py:_load_panel()] - Loading panel: network
2024-01-07 21:33:20,644 [network.py:__init__()] - Found wireless interfaces: ['wlan0']
2024-01-07 21:33:20,645 [network.py:__init__()] - Using NetworkManager
2024-01-07 21:33:21,110 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > network
2024-01-07 21:33:39,984 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-07 21:33:40,057 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-01-07 21:33:40,112 [menu.py:arrangeMenuItems()] - X > move
2024-01-07 21:33:40,131 [menu.py:arrangeMenuItems()] - X > power
2024-01-07 21:33:40,137 [menu.py:arrangeMenuItems()] - X > led
2024-01-07 21:33:40,162 [menu.py:arrangeMenuItems()] - X > retraction
2024-01-07 21:33:40,169 [menu.py:arrangeMenuItems()] - X > spoolman
2024-01-07 21:33:41,073 [screen.py:_menu_go_back()] - #### Menu go back
2024-01-07 21:33:41,108 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-07 21:33:41,133 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_RepRackHangerPrintable_v1.gcode Size: 5459066
2024-01-07 21:33:41,147 [job_status.py:show_file_thumbnail()] - CE6_RepRackHangerPrintable_v1.gcode
2024-01-07 22:33:41,693 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-08 00:08:39,319 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-08 00:08:39,349 [screen.py:wake_screen()] - Screen wake up
2024-01-08 00:08:39,411 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-01-08 00:08:40,300 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-01-08 00:08:40,301 [printer.py:change_state()] - Adding callback for state: ready
2024-01-08 00:35:45,419 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-01-08 00:35:45,421 [job_status.py:restart()] - Starting print: CE6_RepRackHangerPrintable_v1.gcode
2024-01-08 00:35:45,508 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-01-08 00:35:45,510 [printer.py:change_state()] - Adding callback for state: printing
2024-01-08 00:35:45,526 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-01-08 00:35:45,607 [screen.py:show_panel()] - Reinitializing panel
2024-01-08 00:35:45,792 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-08 00:35:45,806 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-08 00:35:45,826 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_RepRackHangerPrintable_v1.gcode Size: 5459066
2024-01-08 00:35:45,841 [job_status.py:show_file_thumbnail()] - CE6_RepRackHangerPrintable_v1.gcode
2024-01-08 01:35:45,693 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-08 04:34:31,884 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-08 04:34:31,909 [screen.py:wake_screen()] - Screen wake up
2024-01-08 04:34:31,970 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-01-08 04:34:32,873 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-01-08 04:34:32,873 [printer.py:change_state()] - Adding callback for state: ready
2024-01-08 04:38:40,283 [job_status.py:close_panel()] - Closing job_status panel
2024-01-08 04:38:40,290 [screen.py:show_panel()] - Reinitializing panel
2024-01-08 04:38:40,450 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-08 04:38:40,463 [main_menu.py:add_device()] - Adding device: extruder
2024-01-08 04:38:40,471 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-08 04:38:40,518 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-08 04:45:32,899 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-01-08 04:45:32,900 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-08 04:45:32,904 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-08 04:45:32,909 [screen.py:show_panel()] - Reinitializing panel
2024-01-08 04:45:33,021 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-08 04:45:36,717 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-08 04:45:36,737 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-08 04:45:36,739 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-08 04:45:36,739 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-08 04:45:36,760 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-08 04:45:36,794 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-08 04:45:36,798 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}'}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '4000', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '62.2', 'shaper_freq_y': '62.8', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 62.2, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 62.8}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 4000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-08 04:45:36,804 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-08 04:45:36,804 [printer.py:reinit()] - # Extruders: 1
2024-01-08 04:45:36,804 [printer.py:reinit()] - # Temperature devices: 1
2024-01-08 04:45:36,804 [printer.py:reinit()] - # Fans: 1
2024-01-08 04:45:36,805 [printer.py:reinit()] - # Output pins: 1
2024-01-08 04:45:36,805 [printer.py:reinit()] - # Leds: 0
2024-01-08 04:45:36,836 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-08 04:45:36,839 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-08 04:45:37,113 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-08 04:45:37,152 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-08 04:45:37,159 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-08 04:45:37,180 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-08 04:45:37,183 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-08 04:45:37,184 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-08 04:45:37,184 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-08 04:45:37,185 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-08 04:45:37,187 [screen.py:init_klipper()] - Printer initialized
2024-01-08 04:45:37,188 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-08 04:45:37,188 [printer.py:change_state()] - Adding callback for state: startup
2024-01-08 04:45:39,547 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-08 04:45:39,548 [printer.py:change_state()] - Adding callback for state: ready
2024-01-08 04:45:39,555 [screen.py:show_panel()] - Reinitializing panel
2024-01-08 04:45:39,666 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-08 04:45:39,678 [main_menu.py:add_device()] - Adding device: extruder
2024-01-08 04:45:39,687 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-08 04:45:39,732 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-08 05:07:51,935 [screen.py:_load_panel()] - Loading panel: print
2024-01-08 05:07:51,984 [print.py:__init__()] - 24h time is True
2024-01-08 05:07:52,039 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-01-08 05:07:52,039 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-08 05:07:52,042 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-08 05:08:12,212 [KlippyGtk.py:Dialog()] - Showing dialog Print CE6_RepRackHangerPrintable_v1.gcode (width=1024, height=600)
2024-01-08 05:08:15,661 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-01-08 05:08:15,662 [print.py:confirm_print_response()] - Starting print: CE6_RepRackHangerPrintable_v1.gcode
2024-01-08 05:08:15,662 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-01-08 05:08:15,711 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-01-08 05:08:15,712 [printer.py:change_state()] - Adding callback for state: printing
2024-01-08 05:08:15,723 [screen.py:show_panel()] - Reinitializing panel
2024-01-08 05:08:15,900 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-08 05:08:15,912 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-08 05:08:15,928 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_RepRackHangerPrintable_v1.gcode Size: 5459066
2024-01-08 05:08:15,943 [job_status.py:show_file_thumbnail()] - CE6_RepRackHangerPrintable_v1.gcode
2024-01-08 06:08:15,692 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-08 08:00:29,927 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-08 08:00:29,979 [screen.py:wake_screen()] - Screen wake up
2024-01-08 08:00:30,043 [screen.py:show_popup_message()] - error: Failed to connect to the requested network
2024-01-08 08:01:18,134 [network.py:connected_callback()] - Now connected to a new network
2024-01-08 09:00:30,692 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-08 09:07:30,600 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-08 09:07:30,638 [screen.py:wake_screen()] - Screen wake up
2024-01-08 09:07:30,702 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-01-08 09:07:31,591 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-01-08 09:07:31,592 [printer.py:change_state()] - Adding callback for state: ready
2024-01-08 10:07:30,705 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-08 14:59:47,870 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-08 14:59:47,915 [screen.py:wake_screen()] - Screen wake up
2024-01-08 14:59:49,406 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-01-08 14:59:49,407 [job_status.py:restart()] - Starting print: CE6_RepRackHangerPrintable_v1.gcode
2024-01-08 14:59:49,624 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-01-08 14:59:49,625 [printer.py:change_state()] - Adding callback for state: printing
2024-01-08 14:59:49,642 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-01-08 14:59:49,704 [screen.py:show_panel()] - Reinitializing panel
2024-01-08 14:59:49,866 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-08 14:59:49,880 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-08 14:59:49,897 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_RepRackHangerPrintable_v1.gcode Size: 5459066
2024-01-08 14:59:49,911 [job_status.py:show_file_thumbnail()] - CE6_RepRackHangerPrintable_v1.gcode
2024-01-08 15:59:49,692 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-08 19:00:04,111 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-08 19:00:04,158 [screen.py:wake_screen()] - Screen wake up
2024-01-08 19:00:04,233 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-01-08 19:00:05,087 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-01-08 19:00:05,088 [printer.py:change_state()] - Adding callback for state: ready
2024-01-08 19:33:39,398 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-01-08 19:33:39,400 [job_status.py:restart()] - Starting print: CE6_RepRackHangerPrintable_v1.gcode
2024-01-08 19:33:39,467 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-01-08 19:33:39,468 [printer.py:change_state()] - Adding callback for state: printing
2024-01-08 19:33:39,484 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'printing'
2024-01-08 19:33:39,557 [screen.py:show_panel()] - Reinitializing panel
2024-01-08 19:33:39,719 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-08 19:33:39,731 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-08 19:33:39,747 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_RepRackHangerPrintable_v1.gcode Size: 5459066
2024-01-08 19:33:39,761 [job_status.py:show_file_thumbnail()] - CE6_RepRackHangerPrintable_v1.gcode
2024-01-08 20:33:39,692 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-08 23:32:48,922 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-08 23:32:48,962 [screen.py:wake_screen()] - Screen wake up
2024-01-08 23:32:49,022 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-01-08 23:32:49,921 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-01-08 23:32:49,922 [printer.py:change_state()] - Adding callback for state: ready
2024-01-09 00:32:49,692 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-09 13:33:28,258 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'standby'
2024-01-09 13:36:21,461 [files.py:_callback()] - Error in getting metadata for .thumbs/CE6_SingleWallCleat_0.6n_0.4lh_v1-400x400.png. Retrying in 6 seconds
2024-01-09 13:36:21,462 [files.py:_callback()] - Error in getting metadata for .thumbs/CE6_SingleWallCleat_0.6n_0.4lh_v1-32x32.png. Retrying in 6 seconds
2024-01-09 13:36:31,363 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-01-09 13:36:31,363 [printer.py:change_state()] - Adding callback for state: printing
2024-01-09 13:36:31,371 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-09 13:36:31,378 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_SingleWallCleat_0.6n_0.4lh_v1.gcode Size: 10590410
2024-01-09 13:36:31,395 [job_status.py:show_file_thumbnail()] - CE6_SingleWallCleat_0.6n_0.4lh_v1.gcode
2024-01-09 13:36:31,402 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-09 13:36:31,426 [screen.py:wake_screen()] - Screen wake up
2024-01-09 13:36:31,494 [screen.py:show_panel()] - Reinitializing panel
2024-01-09 13:36:31,664 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-09 13:36:31,677 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-09 13:36:31,695 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_SingleWallCleat_0.6n_0.4lh_v1.gcode Size: 10590410
2024-01-09 13:36:31,710 [job_status.py:show_file_thumbnail()] - CE6_SingleWallCleat_0.6n_0.4lh_v1.gcode
2024-01-09 14:36:31,694 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-09 19:25:07,684 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-09 19:25:07,712 [screen.py:wake_screen()] - Screen wake up
2024-01-09 19:25:07,772 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-01-09 19:25:08,675 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-01-09 19:25:08,675 [printer.py:change_state()] - Adding callback for state: ready
2024-01-09 20:25:08,695 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-09 23:24:37,562 [job_status.py:set_state()] - Changing job_status state from 'complete' to 'standby'
2024-01-10 16:40:28,017 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=1024, height=600)
2024-01-10 16:40:35,604 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-01-10 16:40:35,605 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-40-ga723282
2024-01-10 16:40:35,605 [functions.py:log_start()] - Python version: 3.9
2024-01-10 16:40:35,755 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2024-01-10 16:40:35,757 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-01-10 16:40:35,775 [config.py:log_config()] -  ===== Config File =====

=======================
2024-01-10 16:40:35,778 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
show_heater_power = True

=======================
2024-01-10 16:40:35,779 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-01-10 16:40:35,894 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-01-10 16:40:35,895 [config.py:install_language()] - Using system lang
2024-01-10 16:40:35,895 [config.py:install_language()] - Using lang en
2024-01-10 16:40:35,923 [screen.py:__init__()] - Screen resolution: 1024x600
2024-01-10 16:40:35,926 [KlippyGtk.py:__init__()] - Font size: 20.7 (medium)
2024-01-10 16:40:36,439 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-01-10 16:40:36,452 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-01-10 16:40:36,463 [screen.py:initial_connection()] - Default printer: None
2024-01-10 16:40:36,463 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-10 16:40:36,464 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-01-10 16:40:36,532 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-10 16:40:36,547 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-10 16:40:36,576 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-10 16:40:36,595 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-10 16:40:36,598 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-10 16:40:36,612 [_logging.py:info()] - Websocket connected
2024-01-10 16:40:36,613 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-10 16:40:36,885 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-10 16:40:36,904 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-10 16:40:36,906 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-10 16:40:36,906 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-244-g6e6388d', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-10 16:40:36,928 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-10 16:40:37,016 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-10 16:40:37,020 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}'}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '4000', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '62.2', 'shaper_freq_y': '62.8', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 62.2, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 62.8}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 4000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-10 16:40:37,024 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-10 16:40:37,025 [printer.py:reinit()] - # Extruders: 1
2024-01-10 16:40:37,025 [printer.py:reinit()] - # Temperature devices: 1
2024-01-10 16:40:37,025 [printer.py:reinit()] - # Fans: 1
2024-01-10 16:40:37,026 [printer.py:reinit()] - # Output pins: 1
2024-01-10 16:40:37,026 [printer.py:reinit()] - # Leds: 0
2024-01-10 16:40:37,051 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-10 16:40:37,054 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-10 16:40:37,351 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-10 16:40:37,396 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-10 16:40:37,404 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-10 16:40:37,424 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-10 16:40:37,427 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-10 16:40:37,427 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-10 16:40:37,428 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-10 16:40:37,429 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-10 16:40:37,430 [screen.py:init_klipper()] - Printer initialized
2024-01-10 16:40:37,432 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-01-10 16:40:37,432 [printer.py:change_state()] - Adding callback for state: ready
2024-01-10 16:40:37,440 [screen.py:_load_panel()] - Loading panel: main_menu
2024-01-10 16:40:37,569 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-10 16:40:37,582 [main_menu.py:add_device()] - Adding device: extruder
2024-01-10 16:40:37,592 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-10 16:40:37,640 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-10 16:42:03,393 [KlippyGtk.py:Dialog()] - Showing dialog Updating (width=1024, height=600)
2024-01-10 16:42:05,098 [base_panel.py:process_update()] - Update complete
2024-01-10 16:42:05,250 [KlippyWebsocket.py:on_close()] - Server Shutdown
2024-01-10 16:42:05,252 [KlippyWebsocket.py:on_close()] - Moonraker Websocket Closed
2024-01-10 16:42:05,257 [screen.py:show_panel()] - Reinitializing panel
2024-01-10 16:42:05,334 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-10 16:42:05,351 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-10 16:42:05,353 [screen.py:show_panel()] - Reinitializing panel
2024-01-10 16:42:05,429 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-10 16:42:05,456 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-10 16:42:05,471 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-01-10 16:42:15,695 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-10 16:42:15,730 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-10 16:42:15,757 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-10 16:42:15,760 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-10 16:42:15,777 [_logging.py:info()] - Websocket connected
2024-01-10 16:42:15,778 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-10 16:42:15,803 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-10 16:42:15,830 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-10 16:42:15,833 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-10 16:42:15,834 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-10 16:42:15,865 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-10 16:42:16,119 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-10 16:42:16,122 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}'}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '4000', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '62.2', 'shaper_freq_y': '62.8', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 62.2, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 62.8}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 4000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-10 16:42:16,127 [printer.py:reinit()] - Klipper version: v0.12.0-60-g0665dc89
2024-01-10 16:42:16,128 [printer.py:reinit()] - # Extruders: 1
2024-01-10 16:42:16,128 [printer.py:reinit()] - # Temperature devices: 1
2024-01-10 16:42:16,129 [printer.py:reinit()] - # Fans: 1
2024-01-10 16:42:16,129 [printer.py:reinit()] - # Output pins: 1
2024-01-10 16:42:16,129 [printer.py:reinit()] - # Leds: 0
2024-01-10 16:42:16,153 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-10 16:42:16,156 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-10 16:42:16,372 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-10 16:42:16,393 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-10 16:42:16,410 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-10 16:42:16,431 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-10 16:42:16,433 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-10 16:42:16,434 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-10 16:42:16,434 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-10 16:42:16,435 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-10 16:42:16,437 [screen.py:init_klipper()] - Printer initialized
2024-01-10 16:42:16,438 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-01-10 16:42:16,438 [printer.py:change_state()] - Adding callback for state: ready
2024-01-10 16:42:16,445 [screen.py:show_panel()] - Reinitializing panel
2024-01-10 16:42:16,562 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-10 16:42:16,574 [main_menu.py:add_device()] - Adding device: extruder
2024-01-10 16:42:16,583 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-10 16:42:16,705 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-10 16:42:49,236 [base_panel.py:process_update()] - Update complete
2024-01-10 16:42:49,306 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-01-10 16:42:49,307 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-10 16:42:49,309 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-10 16:42:49,314 [screen.py:show_panel()] - Reinitializing panel
2024-01-10 16:42:49,393 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-10 16:42:52,715 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-10 16:42:52,737 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-10 16:42:52,739 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-10 16:42:52,740 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'authorization', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-10 16:42:53,477 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-10 16:42:53,551 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-10 16:42:53,555 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}'}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '4000', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '62.2', 'shaper_freq_y': '62.8', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 62.2, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 62.8}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 4000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-10 16:42:53,560 [printer.py:reinit()] - Klipper version: v0.12.0-61-gb50d6669
2024-01-10 16:42:53,560 [printer.py:reinit()] - # Extruders: 1
2024-01-10 16:42:53,561 [printer.py:reinit()] - # Temperature devices: 1
2024-01-10 16:42:53,561 [printer.py:reinit()] - # Fans: 1
2024-01-10 16:42:53,561 [printer.py:reinit()] - # Output pins: 1
2024-01-10 16:42:53,562 [printer.py:reinit()] - # Leds: 0
2024-01-10 16:42:53,587 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-10 16:42:53,590 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-10 16:42:53,869 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-10 16:42:53,902 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-10 16:42:53,920 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-10 16:42:53,943 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-10 16:42:53,945 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-10 16:42:53,946 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-10 16:42:53,947 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-10 16:42:53,948 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-10 16:42:53,950 [screen.py:init_klipper()] - Printer initialized
2024-01-10 16:42:53,951 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-10 16:42:53,951 [printer.py:change_state()] - Adding callback for state: startup
2024-01-10 16:42:56,377 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-10 16:42:56,378 [printer.py:change_state()] - Adding callback for state: ready
2024-01-10 16:42:56,387 [screen.py:show_panel()] - Reinitializing panel
2024-01-10 16:42:56,503 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-10 16:42:56,516 [main_menu.py:add_device()] - Adding device: extruder
2024-01-10 16:42:56,525 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-10 16:42:56,570 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-10 16:44:21,995 [base_panel.py:process_update()] - Update complete
2024-01-10 17:40:36,694 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-10 17:40:36,695 [screen.py:show_screensaver()] - Hiding dialog
2024-01-11 19:01:39,622 [files.py:_callback()] - Error in getting metadata for .thumbs/CE6_Drain Snake Longer-400x400.png. Retrying in 6 seconds
2024-01-11 19:01:39,626 [files.py:_callback()] - Error in getting metadata for .thumbs/CE6_Drain Snake Longer-32x32.png. Retrying in 6 seconds
2024-01-11 19:02:10,895 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-01-11 19:02:10,895 [printer.py:change_state()] - Adding callback for state: printing
2024-01-11 19:02:10,901 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-11 19:02:10,939 [screen.py:wake_screen()] - Screen wake up
2024-01-11 19:02:11,004 [screen.py:close_screensaver()] - Restoring Dialog <Gtk.Dialog object at 0xffff801a4640 (GtkDialog at 0x266579e0)>
2024-01-11 19:02:11,011 [screen.py:_load_panel()] - Loading panel: job_status
2024-01-11 19:02:11,221 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-01-11 19:02:11,234 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-01-11 19:02:11,261 [job_status.py:update_file_metadata()] - Update Metadata. File: CE6_Drain Snake Longer.gcode Size: 972754
2024-01-11 19:02:11,279 [job_status.py:show_file_thumbnail()] - CE6_Drain Snake Longer.gcode
2024-01-11 19:42:19,899 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-01-11 19:42:20,635 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-01-11 19:42:20,636 [printer.py:change_state()] - Adding callback for state: ready
2024-01-11 20:02:11,694 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-11 20:02:11,694 [screen.py:show_screensaver()] - Hiding dialog
2024-01-11 22:05:28,101 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-01-11 22:05:28,102 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-40-ga723282
2024-01-11 22:05:28,102 [functions.py:log_start()] - Python version: 3.9
2024-01-11 22:05:28,425 [config.py:get_config_file_location()] - Passed config (-c): /home/biqu/KlipperScreen.conf
2024-01-11 22:05:28,428 [config.py:__init__()] - Config path location: /home/biqu/printer_data/config/KlipperScreen.conf
2024-01-11 22:05:28,461 [config.py:log_config()] -  ===== Config File =====

=======================
2024-01-11 22:05:28,467 [config.py:__init__()] - ====== Saved Def ======

[main]
theme = material-dark
show_heater_power = True

=======================
2024-01-11 22:05:28,471 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-01-11 22:05:28,599 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-01-11 22:05:28,600 [config.py:install_language()] - Using system lang
2024-01-11 22:05:28,601 [config.py:install_language()] - Using lang en
2024-01-11 22:05:28,636 [screen.py:__init__()] - Screen resolution: 1024x600
2024-01-11 22:05:28,638 [KlippyGtk.py:__init__()] - Font size: 20.7 (medium)
2024-01-11 22:05:30,307 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-01-11 22:05:30,325 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-01-11 22:05:30,339 [screen.py:initial_connection()] - Default printer: None
2024-01-11 22:05:30,340 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-01-11 22:05:30,341 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-01-11 22:05:30,435 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-11 22:05:30,463 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-01-11 22:05:30,505 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 22:05:30,534 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-01-11 22:05:30,538 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-01-11 22:05:30,555 [_logging.py:info()] - Websocket connected
2024-01-11 22:05:30,556 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-01-11 22:05:30,953 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 22:05:30,979 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-11 22:05:30,981 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-11 22:05:30,982 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-11 22:05:30,982 [screen.py:init_klipper()] - Klipper not connected
2024-01-11 22:05:34,363 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 22:05:34,365 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-11 22:05:34,365 [screen.py:init_klipper()] - Klipper not connected
2024-01-11 22:05:37,364 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 22:05:37,366 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-11 22:05:37,404 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-01-11 22:05:40,380 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 22:05:40,410 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-11 22:05:40,413 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-11 22:05:40,414 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-11 22:05:40,457 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-11 22:05:40,509 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-11 22:05:40,515 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}'}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '4000', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '62.2', 'shaper_freq_y': '62.8', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 62.2, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 62.8}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 4000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-11 22:05:40,523 [printer.py:reinit()] - Klipper version: v0.12.0-61-gb50d6669
2024-01-11 22:05:40,524 [printer.py:reinit()] - # Extruders: 1
2024-01-11 22:05:40,524 [printer.py:reinit()] - # Temperature devices: 1
2024-01-11 22:05:40,524 [printer.py:reinit()] - # Fans: 1
2024-01-11 22:05:40,525 [printer.py:reinit()] - # Output pins: 1
2024-01-11 22:05:40,525 [printer.py:reinit()] - # Leds: 0
2024-01-11 22:05:40,558 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-11 22:05:40,562 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-11 22:05:40,833 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-11 22:05:40,853 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-11 22:05:40,855 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-01-11 22:05:40,856 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-11 22:05:40,857 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-11 22:05:40,858 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-11 22:05:40,860 [screen.py:init_klipper()] - Printer initialized
2024-01-11 22:05:40,861 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-01-11 22:05:40,861 [printer.py:change_state()] - Adding callback for state: ready
2024-01-11 22:05:40,867 [screen.py:_load_panel()] - Loading panel: main_menu
2024-01-11 22:05:41,004 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-11 22:05:41,017 [main_menu.py:add_device()] - Adding device: extruder
2024-01-11 22:05:41,026 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-11 22:05:41,073 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-11 22:05:41,076 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2024-01-11 22:05:46,373 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-11 22:05:46,394 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-11 22:05:46,417 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-11 22:05:46,419 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-11 22:13:47,242 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-01-11 22:13:47,243 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-11 22:13:47,244 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-11 22:13:47,252 [screen.py:show_panel()] - Reinitializing panel
2024-01-11 22:13:47,315 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-11 22:13:50,366 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 22:13:50,387 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-11 22:13:50,389 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-11 22:13:50,390 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-11 22:13:51,117 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-11 22:13:51,150 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-11 22:13:51,152 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-11 22:13:51,153 [printer.py:reinit()] - Klipper version: v0.12.0-61-gb50d6669
2024-01-11 22:13:51,154 [printer.py:reinit()] - # Extruders: 0
2024-01-11 22:13:51,154 [printer.py:reinit()] - # Temperature devices: 0
2024-01-11 22:13:51,154 [printer.py:reinit()] - # Fans: 0
2024-01-11 22:13:51,154 [printer.py:reinit()] - # Output pins: 0
2024-01-11 22:13:51,154 [printer.py:reinit()] - # Leds: 0
2024-01-11 22:13:51,178 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-11 22:13:51,181 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-11 22:13:51,409 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-01-11 22:13:51,411 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-11 22:13:51,413 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-11 22:13:51,414 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-11 22:13:51,416 [screen.py:init_klipper()] - Printer initialized
2024-01-11 22:13:51,417 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-01-11 22:13:51,417 [printer.py:change_state()] - Adding callback for state: error
2024-01-11 22:13:51,431 [screen.py:show_panel()] - Reinitializing panel
2024-01-11 22:13:51,507 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-11 22:15:11,477 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-01-11 22:15:11,478 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-11 22:15:11,479 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-11 22:15:11,482 [screen.py:show_panel()] - Reinitializing panel
2024-01-11 22:15:11,545 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-11 22:15:14,363 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 22:15:14,385 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-11 22:15:14,387 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-11 22:15:14,388 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-11 22:15:15,103 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-11 22:15:15,135 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-11 22:15:15,136 [screen.py:init_klipper()] - {'configfile': {'config': {}, 'settings': {}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-11 22:15:15,137 [printer.py:reinit()] - Klipper version: v0.12.0-61-gb50d6669
2024-01-11 22:15:15,138 [printer.py:reinit()] - # Extruders: 0
2024-01-11 22:15:15,138 [printer.py:reinit()] - # Temperature devices: 0
2024-01-11 22:15:15,138 [printer.py:reinit()] - # Fans: 0
2024-01-11 22:15:15,138 [printer.py:reinit()] - # Output pins: 0
2024-01-11 22:15:15,138 [printer.py:reinit()] - # Leds: 0
2024-01-11 22:15:15,160 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-11 22:15:15,162 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-11 22:15:15,391 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe
2024-01-11 22:15:15,394 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-11 22:15:15,395 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-11 22:15:15,396 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-11 22:15:15,398 [screen.py:init_klipper()] - Printer initialized
2024-01-11 22:15:15,399 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-01-11 22:15:15,400 [printer.py:change_state()] - Adding callback for state: error
2024-01-11 22:15:15,410 [screen.py:show_panel()] - Reinitializing panel
2024-01-11 22:15:15,488 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-11 22:23:45,719 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-01-11 22:23:45,720 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-11 22:23:45,721 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-11 22:23:45,724 [screen.py:show_panel()] - Reinitializing panel
2024-01-11 22:23:45,783 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-11 22:23:49,372 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 22:23:49,402 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-11 22:23:49,405 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-11 22:23:49,406 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-11 22:23:49,406 [screen.py:init_klipper()] - Klipper not connected
2024-01-11 22:23:52,375 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 22:23:52,378 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-11 22:23:52,379 [screen.py:init_klipper()] - Klipper not connected
2024-01-11 22:23:55,376 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 22:23:55,379 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-11 22:23:55,380 [screen.py:init_klipper()] - Klipper not connected
2024-01-11 22:23:58,363 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 22:23:58,365 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': False, 'klippy_state': 'disconnected', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-11 22:23:58,365 [screen.py:init_klipper()] - Klipper not connected
2024-01-11 22:24:01,365 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 22:24:01,367 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-11 22:24:01,633 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-11 22:24:01,717 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-11 22:24:01,721 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}'}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '4000', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '62.2', 'shaper_freq_y': '62.8', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/biqu/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 62.2, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 62.8}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/biqu/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 4000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-11 22:24:01,725 [printer.py:reinit()] - Klipper version: v0.12.0-61-gb50d6669-dirty
2024-01-11 22:24:01,726 [printer.py:reinit()] - # Extruders: 1
2024-01-11 22:24:01,726 [printer.py:reinit()] - # Temperature devices: 1
2024-01-11 22:24:01,727 [printer.py:reinit()] - # Fans: 1
2024-01-11 22:24:01,727 [printer.py:reinit()] - # Output pins: 1
2024-01-11 22:24:01,728 [printer.py:reinit()] - # Leds: 0
2024-01-11 22:24:01,752 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-11 22:24:01,754 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-11 22:24:02,032 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-11 22:24:02,073 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-11 22:24:02,081 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-11 22:24:02,102 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-11 22:24:02,105 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-11 22:24:02,106 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-11 22:24:02,106 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-11 22:24:02,107 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-11 22:24:02,109 [screen.py:init_klipper()] - Printer initialized
2024-01-11 22:24:02,110 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-11 22:24:02,110 [printer.py:change_state()] - Adding callback for state: startup
2024-01-11 22:24:04,523 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-11 22:24:04,524 [printer.py:change_state()] - Adding callback for state: ready
2024-01-11 22:24:04,530 [screen.py:show_panel()] - Reinitializing panel
2024-01-11 22:24:04,645 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-11 22:24:04,658 [main_menu.py:add_device()] - Adding device: extruder
2024-01-11 22:24:04,667 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-11 22:24:04,714 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-01-11 23:05:30,357 [screen.py:show_screensaver()] - Showing Screensaver
2024-01-11 23:05:44,642 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-01-11 23:05:44,643 [printer.py:change_state()] - Adding callback for state: disconnected
2024-01-11 23:05:44,645 [screen.py:state_disconnected()] - ### Going to disconnected
2024-01-11 23:05:44,645 [screen.py:close_screensaver()] - Closing Screensaver
2024-01-11 23:05:44,667 [screen.py:wake_screen()] - Screen wake up
2024-01-11 23:05:44,737 [screen.py:show_panel()] - Reinitializing panel
2024-01-11 23:05:44,798 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-01-11 23:05:48,363 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-01-11 23:05:48,382 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-01-11 23:05:48,385 [printer.py:configure_cameras()] - Cameras: [{'name': 'E6', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': '5bceeea0-6228-481a-b39c-72149b3e1ed1'}]
2024-01-11 23:05:48,385 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['klippy_connection', 'application', 'jsonrpc', 'internal_transport', 'websockets', 'dbus_manager', 'database', 'file_manager', 'klippy_apis', 'secrets', 'template', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat', 'authorization'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-246-gea6df41', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-01-11 23:05:48,406 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-01-11 23:05:48,440 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-01-11 23:05:48,444 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '50'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro LOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state"}, 'gcode_macro BED_MESH_CALIBRATE': {'rename_existing': '_BED_MESH_CALIBRATE', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1', 'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}'}, 'stepper_x': {'step_pin': 'PD4', 'dir_pin': 'PD3', 'enable_pin': '!PD6', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC1', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_y': {'step_pin': 'PA15', 'dir_pin': 'PA8', 'enable_pin': '!PD1', 'microsteps': '16', 'rotation_distance': '40', 'endstop_pin': '^PC3', 'position_min': '-1', 'position_endstop': '260', 'position_max': '260', 'homing_speed': '50'}, 'stepper_z': {'step_pin': 'PE2', 'dir_pin': '!PE3', 'enable_pin': '!PE0', 'microsteps': '16', 'rotation_distance': '8', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '400', 'homing_speed': '25'}, 'extruder': {'step_pin': 'PD15', 'dir_pin': 'PD14', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '3.4334', 'nozzle_diameter': '0.6', 'filament_diameter': '1.750', 'heater_pin': 'PB3', 'sensor_type': 'Generic 3950', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '300', 'max_extrude_only_distance': '102', 'pressure_advance': '0.025', 'control': 'pid', 'pid_kp': '26.231', 'pid_ki': '1.305', 'pid_kd': '131.813'}, 'heater_bed': {'heater_pin': 'PD7', 'sensor_type': 'EPCOS 100K B57560G104F', 'sensor_pin': 'PA1', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '67.038', 'pid_ki': '0.652', 'pid_kd': '1722.030'}, 'fan': {'pin': 'PB7'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00'}, 'mcu CB1': {'serial': '/tmp/klipper_host_mcu'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '600', 'max_accel': '5000', 'max_accel_to_decel': '4000', 'max_z_velocity': '10', 'max_z_accel': '100', 'square_corner_velocity': '5'}, 'adxl345': {'cs_pin': 'CB1:None', 'spi_bus': 'spidev1.1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n150.7, 137, 135'}, 'input_shaper': {'shaper_freq_x': '62.2', 'shaper_freq_y': '62.8', 'shaper_type': 'mzv'}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'en_pin': 'EXP1_4', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2'}, 'output_pin beeper': {'pin': 'EXP1_1'}, 'board_pins': {'aliases': '\n\nEXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,\nEXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,\n\nEXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,\nEXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>'}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'run_current': '0.800'}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'run_current': '0.800'}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'run_current': '0.800'}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'run_current': '0.800'}, 'bltouch': {'sensor_pin': '^PC13', 'control_pin': 'PE5', 'x_offset': '-33.7', 'y_offset': '-1', 'speed': '5.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '5.0', 'samples_tolerance': '0.10', 'samples_tolerance_retries': '3', 'z_offset': '2.025'}, 'safe_z_home': {'home_xy_position': '150.7, 137', 'speed': '100', 'z_hop': '10', 'z_hop_speed': '5'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '5', 'mesh_min': '10, 10', 'mesh_max': '225, 225', 'algorithm': 'bicubic', 'probe_count': '5,5'}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'detection_length': '10', 'extruder': 'extruder', 'pause_on_runout': 'True', 'event_delay': '3.0', 'pause_delay': '0.5', 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0'}, 'gcode_macro START_PRINT': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000'}, 'gcode_macro END_PRINT': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE'}, 'gcode_arcs': {'resolution': '1.0'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/biqu/printer_data/klipper-backup/script.sh', 'timeout': '90.0', 'verbose': 'True'}, 'gcode_macro PURGE_LINE': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default2': {'version': '1', 'points': '\n-0.025000, -0.035000, -0.025000, -0.022500, -0.047500\n-0.000000, 0.005000, 0.005000, -0.015000, -0.040000\n-0.005000, 0.005000, 0.010000, -0.025000, -0.065000\n0.012500, 0.020000, 0.012500, -0.020000, -0.047500\n-0.035000, -0.050000, -0.057500, -0.102500, -0.120000', 'x_count': '5', 'y_count': '5', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '10.0', 'max_x': '225.0', 'min_y': '10.0', 'max_y': '225.0'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32h743xx_2A0021001851303232383230-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu cb1': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=load_state\nM300\nG91\nG92 E0\nG1 E350 F{max_velocity}\nG1 E25 F{speed}\nM300\nM300\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nM300\nG92 E0\nG1 E25 F{speed}\nG1 E-420 F{max_velocity}\nM300\nM300\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro'}, 'gcode_macro bed_mesh_calibrate': {'gcode': '\n\n{% if params.FORCE_NEW_MESH != null %}\n{ action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }\n{% endif %}\n{% if printer["bed_mesh"].profile_name == \'\' %}\n{ action_respond_info("No existing bed mesh found.") }\n{% set last_area_end_x=-1 %}\n{% endif %}\n\n{% if printer.toolhead.homed_axes != "xyz" %}\nG28\n{% endif %}\n\n{% set klicky_available = printer[\'gcode_macro _Probe_Variables\'] != null %}\n{% set euclid_available = printer[\'gcode_macro EuclidProbe\'] != null %}; Requires v5 macros https://github.com/nionio6915/Euclid_Probe/blob/main/Firmware_Examples/Klipper/00-euclid_exampleV5.cfg\n{% if params.PRINT_MIN %}\n{ action_respond_info("print_min: %s" % params.PRINT_MIN) }\n{ action_respond_info("print_max: %s" % params.PRINT_MAX) }\n\n{% set blTouchConfig = printer[\'configfile\'].config["bltouch"] %}\n{% if blTouchConfig %}\n{% set OffsetX = blTouchConfig.x_offset|default(0)|float %}\n{% set OffsetY = blTouchConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set probeConfig = printer[\'configfile\'].config["probe"] %}\n{% if probeConfig %}\n{% set OffsetX = probeConfig.x_offset|default(0)|float %}\n{% set OffsetY = probeConfig.y_offset|default(0)|float %}\n{% endif %}\n\n{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}\n{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}\n{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}\n{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}\n\n{% if last_area_start_x > 0 %}\n{ action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }\n{% endif %}\n\n{% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nDEPLOY_PROBE\n{% endif %}\n{% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}\n\n\n{% set bedMeshConfig = printer[\'configfile\'].config["bed_mesh"] %}\n{% set minimum_probe_count = 3 %}\n{% if bedMeshConfig.algorithm == "bicubic" %}\n{% set minimum_probe_count = 5 %}\n{% endif %}\n{% set probe_count = bedMeshConfig.probe_count.split(",") %}\n{% set probe_count_x = probe_count[0]|int %}\n{% if probe_count.__len__() > 1 %}\n{% set probe_count_y = probe_count[1]|int %}\n{% else %}\n{% set probe_count_y = probe_count_x|int %}\n{% endif %}\n{% set relative_reference_index = bedMeshConfig.relative_reference_index %}\n{% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}\n{% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}\n{% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}\n{% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}\n\n\n{% if print_max_x - print_min_x < (mesh_max_x - mesh_min_x) * 0.50 %}\n{% set probe_count_x = minimum_probe_count %}\n{% endif %}\n\n\n{% if print_max_y - print_min_y < (mesh_max_y - mesh_min_y) * 0.50 %}\n{% set probe_count_y = minimum_probe_count %}\n{% endif %}\n\n{% if print_min_x - buffer >= mesh_min_x %}\n{% set mesh_min_x = print_min_x - buffer %}\n{% endif %}\n\n{% if print_min_y - buffer >= mesh_min_y %}\n{% set mesh_min_y = print_min_y - buffer %}\n{% endif %}\n\n{% if print_max_x + buffer <= mesh_max_x %}\n{% set mesh_max_x = print_max_x + buffer %}\n{% endif %}\n\n{% if print_max_y + buffer <= mesh_max_y %}\n{% set mesh_max_y = print_max_y + buffer %}\n{% endif %}\n\n{ action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }\n{ action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }\n{ action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }\n\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}\nSET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}\n\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n\n{% if relative_reference_index == 0 or relative_reference_index == null %}\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}\n{% else %}\n{% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}\n{ action_respond_info("relative_reference_index: %s" % relative_reference_index) }\n_BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}\n{% endif %}\n{% else %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% endif %}\n{% if klicky_available %}\nDock_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% else %}\n{ action_respond_info("No need to recreate Bed Mesh since it\'s same as current mesh or smaller") }\n{% endif %}\n{% else %}\n{% if klicky_available %}\n_CheckProbe action=query\nAttach_Probe\n{% elif euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% if printer["gcode_macro status_meshing"] != null %}\nstatus_meshing\n{% endif %}\n_BED_MESH_CALIBRATE\n{% if klicky_available %}\nDock_Probe\n{% endif %}\n{% if euclid_available %}\nSTOW_PROBE\n{% endif %}\n{% endif %}\n{% if printer["gcode_macro status_ready"] != null %}\nstatus_ready\n{% endif %}', 'rename_existing': '_BED_MESH_CALIBRATE', 'description': 'G-Code macro', 'variable_buffer': '20', 'variable_last_area_start_x': '-1', 'variable_last_area_start_y': '-1', 'variable_last_area_end_x': '-1', 'variable_last_area_end_y': '-1'}, 'heater_bed': {'sensor_type': 'EPCOS 100K B57560G104F', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 67.038, 'pid_ki': 0.652, 'pid_kd': 1722.03, 'heater_pin': 'PD7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PB7'}, 'adxl345': {'axes_map': ['z', 'y', 'x'], 'rate': 3200, 'cs_pin': 'CB1:None', 'spi_speed': 5000000, 'spi_bus': 'spidev1.1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': [[150.7, 137.0, 135.0]], 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 62.2, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 62.8}, 'display': {'lcd_type': 'emulated_st7920', 'spi_software_miso_pin': 'PA14', 'spi_software_mosi_pin': 'EXP1_3', 'spi_software_sclk_pin': 'EXP1_5', 'spi_speed': 1000000, 'en_pin': 'EXP1_4', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '_default_16x4'}, 'output_pin beeper': {'pwm': False, 'pin': 'EXP1_1', 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PC5'], ['EXP1_3', 'PB1'], ['EXP1_5', 'PE9'], ['EXP1_7', 'PE11'], ['EXP1_9', '<GND>'], ['EXP1_2', 'PB0'], ['EXP1_4', 'PE8'], ['EXP1_6', 'PE10'], ['EXP1_8', 'PE12'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_3', 'PE7'], ['EXP2_5', 'PB2'], ['EXP2_7', 'PC4'], ['EXP2_9', '<GND>'], ['EXP2_2', 'PA5'], ['EXP2_4', 'PA4'], ['EXP2_6', 'PA7'], ['EXP2_8', '<RST>'], ['EXP2_10', '<NC>']]}, 'tmc2209 stepper_x': {'uart_pin': 'PD5', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PD4', 'dir_pin': 'PD3', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD6', 'endstop_pin': '^PC1', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PA15', 'dir_pin': 'PA8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD1', 'endstop_pin': '^PC3', 'position_endstop': 260.0, 'position_min': -1.0, 'position_max': 260.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PE1', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PE3', 'rotation_distance': 8.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PE0', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': 0.0, 'position_max': 400.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 300.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.231, 'pid_ki': 1.305, 'pid_kd': 131.813, 'heater_pin': 'PB3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.6, 'filament_diameter': 1.75, 'max_extrude_cross_section': 1.44, 'max_extrude_only_velocity': 359.2094584983447, 'max_extrude_only_accel': 2993.4121541528725, 'max_extrude_only_distance': 102.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD15', 'pressure_advance': 0.025, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD14', 'rotation_distance': 3.4334, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC7'}, 'bltouch': {'z_offset': 2.025, 'stow_on_each_sample': True, 'probe_with_touch_mode': False, 'control_pin': 'PE5', 'sensor_pin': '^PC13', 'pin_up_reports_not_triggered': True, 'pin_up_touch_mode_reports_triggered': True, 'pin_move_time': 0.68, 'speed': 5.0, 'lift_speed': 5.0, 'x_offset': -33.7, 'y_offset': -1.0, 'samples': 3, 'sample_retract_dist': 5.0, 'samples_result': 'median', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 3}, 'safe_z_home': {'home_xy_position': [150.7, 137.0], 'z_hop': 10.0, 'z_hop_speed': 5.0, 'speed': 100.0, 'move_to_previous': False}, 'bed_mesh': {'probe_count': [5, 5], 'mesh_min': [10.0, 10.0], 'mesh_max': [225.0, 225.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default2': {'version': 1, 'points': [[-0.025, -0.035, -0.025, -0.0225, -0.0475], [-0.0, 0.005, 0.005, -0.015, -0.04], [-0.005, 0.005, 0.01, -0.025, -0.065], [0.0125, 0.02, 0.0125, -0.02, -0.0475], [-0.035, -0.05, -0.0575, -0.1025, -0.12]], 'min_x': 10.0, 'max_x': 225.0, 'min_y': 10.0, 'max_y': 225.0, 'x_count': 5, 'y_count': 5, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'filament_motion_sensor encoder_sensor': {'switch_pin': '^PC2', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\nM117 Filament encoder runout', 'insert_gcode': '\nM117 Filament encoder inserted', 'pause_delay': 0.5, 'event_delay': 3.0}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the Smart Filament Sensor\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro start_print': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(60)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nG90\n\nSET_GCODE_OFFSET Z=0.0\n\nG28\n\nBED_MESH_PROFILE LOAD=default2\n\n\nG1 Z5 F300\n\nG1 Z0.15 F300\n\nM190 S{BED_TEMP}\n\nM109 S{EXTRUDER_TEMP}\n\nSFS_ENABLE\n\n\nG1 Z5.0 F3000\nG1 X11.1 Y20 Z0.28 F5000.0\nG1 X11.1 Y200.0 Z0.28 F1500.0 E15\nG1 X11.4 Y200.0 Z0.28 F5000.0\nG1 X11.4 Y20 Z0.28 F1500.0 E30\nG92 E0\nG1 Z2.0 F3000', 'description': 'G-Code macro'}, 'gcode_macro end_print': {'gcode': '\n\nM140 S0\nM104 S0\nM106 S0\n\nG91\nG1 X-2 Y-2 Z5 E-3 F300\n\nG1 Z10 F3000\nG1 X0 Y250 F2200\nM107\nG90\n\nM84\n\nSFS_DISABLE', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 1.0}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state\nSET_IDLE_TIMEOUT TIMEOUT=1800', 'description': 'G-Code macro'}, 'gcode_macro update_git': {'gcode': '\nRUN_SHELL_COMMAND CMD=update_git_script', 'description': 'G-Code macro'}, 'gcode_shell_command update_git_script': {'command': 'bash /home/biqu/printer_data/klipper-backup/script.sh', 'timeout': 90.0, 'verbose': True}, 'gcode_macro purge_line': {'gcode': '\nG0 Y0 X40\nG1 Z0.2 F500.0\nG92 E0.0\nG1 E2 F500\nG1 X80 E8.0 F500.0\nG1 Y0.3\nG1 X40 E8.0 F500.0\nG92 E0.0\nG1 Z2.0', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nM400\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nM400\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nM400\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 600.0, 'max_accel': 5000.0, 'max_accel_to_decel': 4000.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 10.0, 'max_z_accel': 100.0}, 'force_move': {'enable_force_move': False}, 'idle_timeout': {'timeout': 600.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-01-11 23:05:48,450 [printer.py:reinit()] - Klipper version: v0.12.0-61-gb50d6669-dirty
2024-01-11 23:05:48,450 [printer.py:reinit()] - # Extruders: 1
2024-01-11 23:05:48,450 [printer.py:reinit()] - # Temperature devices: 1
2024-01-11 23:05:48,450 [printer.py:reinit()] - # Fans: 1
2024-01-11 23:05:48,451 [printer.py:reinit()] - # Output pins: 1
2024-01-11 23:05:48,451 [printer.py:reinit()] - # Leds: 0
2024-01-11 23:05:48,481 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-01-11 23:05:48,484 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-01-11 23:05:48,759 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&fan&filament_motion_sensor encoder_sensor&output_pin beeper
2024-01-11 23:05:48,798 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-01-11 23:05:48,804 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'extruder']
2024-01-11 23:05:48,826 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-01-11 23:05:48,829 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-01-11 23:05:48,830 [files.py:initialize()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-01-11 23:05:48,830 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-01-11 23:05:48,831 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-01-11 23:05:48,833 [screen.py:init_klipper()] - Printer initialized
2024-01-11 23:05:48,834 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-01-11 23:05:48,834 [printer.py:change_state()] - Adding callback for state: startup
2024-01-11 23:05:51,215 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-01-11 23:05:51,216 [printer.py:change_state()] - Adding callback for state: ready
2024-01-11 23:05:51,223 [screen.py:show_panel()] - Reinitializing panel
2024-01-11 23:05:51,333 [main_menu.py:__init__()] - ### Making MainMenu
2024-01-11 23:05:51,345 [main_menu.py:add_device()] - Adding device: extruder
2024-01-11 23:05:51,354 [main_menu.py:add_device()] - Adding device: heater_bed
2024-01-11 23:05:51,399 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
